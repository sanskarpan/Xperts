This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-04T04:43:03.891Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
articles/
  migrations/
    0001_initial.py
    0002_alter_article_mentor.py
  admin.py
  apps.py
  models.py
  tests.py
  views.py
automation/
  migrations/
    0001_initial.py
  admin.py
  apps.py
  models.py
  tests.py
  urls.py
  utils.py
  views.py
blogs/
  migrations/
    0001_initial.py
    0002_alter_blogpost_content.py
    0003_blogpost_thumbnail.py
    0004_blogpost_meta_description_blogpost_meta_title_and_more.py
  admin.py
  apps.py
  models.py
  permissions.py
  serializers.py
  tests.py
  urls.py
  views.py
booking/
  migrations/
    0001_initial.py
  admin.py
  apps.py
  models.py
  razorpay_service.py
  serializers.py
  tests.py
  urls.py
  views.py
cohorts/
  migrations/
    0001_initial.py
    0002_cohortregistration_payment.py
    0003_rename_payment_date_cohortregistration_registered_at_and_more.py
    0004_alter_payment_payment_id.py
    0005_alter_payment_payment_id.py
    0006_rename_payment_id_payment_razorpay_payment_id.py
    0007_payment_order_id_alter_payment_razorpay_payment_id.py
    0008_alter_payment_order_id.py
    0009_alter_payment_order_id.py
    0010_alter_payment_order_id.py
    0011_alter_payment_order_id.py
    0012_alter_payment_order_id.py
    0013_alter_payment_order_id.py
    0014_alter_payment_order_id.py
    0015_alter_payment_order_id.py
    0016_alter_payment_order_id.py
    0017_alter_payment_order_id.py
    0018_alter_payment_order_id.py
    0019_alter_payment_order_id.py
    0020_rename_created_at_payment_payment_date_and_more.py
    0021_alter_cohort_end_date_alter_cohort_start_date_and_more.py
    0022_alter_cohort_end_date_alter_cohort_start_date.py
    0023_alter_cohort_end_date_alter_cohort_start_date.py
    0024_alter_cohort_end_date_alter_cohort_start_date.py
    0025_payment_razorpay_signature_payment_verified_and_more.py
    0026_alter_cohort_end_date_alter_cohort_start_date.py
    0027_alter_cohort_end_date_alter_cohort_start_date.py
    0028_alter_cohort_end_date_alter_cohort_start_date.py
    0029_alter_cohort_end_date_alter_cohort_start_date.py
    0030_alter_cohort_end_date_alter_cohort_start_date.py
    0031_alter_cohort_end_date_alter_cohort_start_date.py
    0032_alter_cohort_end_date_alter_cohort_start_date.py
    0033_alter_cohort_end_date_alter_cohort_start_date.py
    0034_alter_cohort_end_date_alter_cohort_start_date.py
    0035_alter_cohort_end_date_alter_cohort_start_date.py
    0036_alter_cohort_end_date_alter_cohort_start_date.py
    0037_alter_cohort_end_date_alter_cohort_start_date.py
    0038_alter_cohort_end_date_alter_cohort_start_date.py
    0039_alter_cohort_end_date_alter_cohort_start_date.py
    0040_alter_cohort_end_date_alter_cohort_start_date.py
    0041_alter_cohort_end_date_alter_cohort_start_date.py
    0042_alter_cohort_end_date_alter_cohort_start_date.py
    0043_alter_cohort_end_date_alter_cohort_start_date.py
    0044_alter_cohort_end_date_alter_cohort_start_date.py
    0045_alter_cohort_end_date_alter_cohort_start_date.py
    0046_alter_cohort_end_date_alter_cohort_start_date.py
    0047_alter_cohort_end_date_alter_cohort_start_date.py
    0048_alter_cohort_end_date_alter_cohort_start_date.py
    0049_alter_cohort_end_date_alter_cohort_start_date.py
    0050_alter_cohort_end_date_alter_cohort_start_date.py
    0051_alter_cohort_end_date_alter_cohort_start_date.py
    0052_alter_cohort_end_date_alter_cohort_start_date.py
    0053_alter_cohort_end_date_alter_cohort_start_date.py
    0054_alter_cohort_end_date_alter_cohort_start_date.py
    0055_alter_cohort_end_date_alter_cohort_start_date.py
    0056_alter_cohort_end_date_alter_cohort_start_date.py
    0057_alter_cohort_end_date_alter_cohort_start_date.py
    0058_alter_cohort_end_date_alter_cohort_start_date.py
    0059_alter_cohort_end_date_alter_cohort_start_date.py
    0060_alter_cohort_end_date_alter_cohort_start_date.py
    0061_alter_cohort_end_date_alter_cohort_start_date.py
    0062_alter_cohort_end_date_alter_cohort_start_date.py
    0063_alter_cohort_end_date_alter_cohort_start_date.py
    0064_alter_cohort_end_date_alter_cohort_start_date.py
    0065_alter_cohort_end_date_alter_cohort_start_date.py
    0066_alter_cohort_end_date_alter_cohort_start_date.py
    0067_alter_cohort_end_date_alter_cohort_start_date.py
    0068_alter_cohort_end_date_alter_cohort_start_date.py
    0069_alter_cohort_end_date_alter_cohort_start_date.py
    0070_alter_cohort_end_date_alter_cohort_start_date.py
    0071_alter_cohort_end_date_alter_cohort_start_date.py
    0072_alter_cohort_end_date_alter_cohort_start_date.py
    0073_alter_cohort_end_date_alter_cohort_start_date.py
    0074_alter_cohort_end_date_alter_cohort_start_date.py
    0075_alter_cohort_end_date_alter_cohort_start_date.py
    0076_alter_cohort_end_date_alter_cohort_start_date.py
    0077_alter_cohort_end_date_alter_cohort_start_date.py
    0078_alter_cohort_end_date_alter_cohort_start_date.py
    0079_alter_cohort_end_date_alter_cohort_start_date.py
    0080_alter_cohort_end_date_alter_cohort_start_date.py
    0081_alter_cohort_end_date_alter_cohort_start_date.py
    0082_alter_cohort_end_date_alter_cohort_start_date.py
    0083_alter_cohort_end_date_alter_cohort_start_date.py
    0084_alter_cohort_end_date_alter_cohort_start_date.py
    0085_alter_cohort_end_date_alter_cohort_start_date.py
    0086_alter_cohort_end_date_alter_cohort_start_date.py
    0087_alter_cohort_end_date_alter_cohort_start_date.py
    0088_alter_cohort_end_date_alter_cohort_start_date.py
    0089_alter_cohort_end_date_alter_cohort_start_date.py
    0090_alter_cohort_end_date_alter_cohort_start_date.py
    0091_alter_cohort_end_date_alter_cohort_start_date.py
    0092_alter_cohort_end_date_alter_cohort_start_date.py
    0093_alter_cohort_end_date_alter_cohort_start_date.py
    0094_alter_cohort_end_date_alter_cohort_start_date.py
    0095_alter_cohort_end_date_alter_cohort_start_date.py
    0096_alter_cohort_end_date_alter_cohort_start_date.py
    0097_alter_cohort_end_date_alter_cohort_start_date.py
    0098_alter_cohort_end_date_alter_cohort_start_date.py
    0099_alter_cohort_end_date_alter_cohort_start_date.py
    0100_alter_cohort_end_date_alter_cohort_start_date.py
    0101_alter_cohort_end_date_alter_cohort_start_date.py
    0102_alter_cohort_end_date_alter_cohort_start_date.py
    0103_alter_cohort_end_date_alter_cohort_start_date.py
    0104_alter_cohort_end_date_alter_cohort_start_date.py
    0105_alter_cohort_end_date_alter_cohort_start_date.py
    0106_alter_cohort_end_date_alter_cohort_start_date.py
    0107_alter_cohort_end_date_alter_cohort_start_date.py
    0108_alter_cohort_end_date_alter_cohort_start_date.py
    0109_alter_cohort_end_date_alter_cohort_start_date.py
    0110_alter_cohort_end_date_alter_cohort_start_date.py
    0111_alter_cohort_end_date_alter_cohort_start_date.py
    0112_alter_cohort_end_date_alter_cohort_start_date.py
    0113_alter_cohort_end_date_alter_cohort_start_date.py
    0114_alter_cohort_end_date_alter_cohort_start_date.py
    0115_alter_cohort_end_date_alter_cohort_start_date.py
    0116_alter_cohort_end_date_alter_cohort_start_date.py
    0117_alter_cohort_end_date_alter_cohort_start_date.py
    0118_alter_cohort_end_date_alter_cohort_start_date.py
    0119_alter_cohort_end_date_alter_cohort_start_date.py
    0120_alter_cohort_end_date_alter_cohort_start_date.py
    0121_alter_cohort_end_date_alter_cohort_start_date.py
    0122_alter_cohort_end_date_alter_cohort_start_date.py
    0123_alter_cohort_end_date_alter_cohort_start_date.py
  admin.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
core/
  migrations/
    0001_initial.py
    0002_alter_mentor_introductory_video.py
    0003_remove_mentor_schedule_mentor_schedule.py
    0004_remove_mentor_expertise_remove_mentor_toolkits_used_and_more.py
    0005_remove_mentor_content_links_contentlink.py
    0006_remove_contentlink_mentor_mentor_content_links.py
    0007_remove_mentor_content_links_delete_contentlink_and_more.py
    0008_remove_mentor_content_links_mentor_content_links.py
    0009_alter_mentor_content_links.py
    0010_remove_mentor_experience_mentor_experience.py
    0011_timeblock_remove_mentor_time_blocks_and_more.py
    0012_remove_mentor_reviews_review_mentor_reviews.py
    0013_workexperience_alter_mentor_experience.py
    0014_alter_mentor_experience_delete_workexperience.py
    0015_customuser_user_type.py
    0016_delete_timeblock_alter_mentor_time_blocks.py
    0017_mentor_profile_picture.py
    0018_customuser_otp.py
    0019_remove_customuser_otp_otp.py
    0020_remove_mentor_time_blocks_mentortimeblock.py
    0021_customuser_profile_picture.py
    0022_mentor_location.py
    0023_mentor_joined_date.py
    0024_remove_mentor_schedule_mentorappointment_and_more.py
    0025_alter_mentortimeslot_unique_together_and_more.py
    0026_availability_mentor_availabilities_timeslot_and_more.py
    0027_alter_timeslot_unique_together_booking_payment.py
    0028_booking_booking_status.py
    0029_remove_mentor_schedule_booking_meeting_link.py
    0030_mentor_schedule.py
    0031_remove_booking_booking_status_and_more.py
    0032_booking_booking_status.py
    0033_booking_meeting_link.py
  admin.py
  apps.py
  models.py
  pipeline.py
  razorpay_service.py
  serializers.py
  tests.py
  urls.py
  views.py
events/
  migrations/
    0001_initial.py
    0002_remove_event_participants_event_introductory_video_and_more.py
    0003_alter_eventregistration_unique_together.py
    0004_event_photo.py
    0005_eventregistration_payment_status_eventpayment.py
    0006_event_background_image.py
    0007_event_slug.py
  admin.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
industry/
  migrations/
    0001_initial.py
    0002_expertise_expertise_description.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
mentorbooking/
  migrations/
    0001_initial.py
    0002_alter_booking_availability_alter_booking_mentor_and_more.py
    0003_remove_payment_booking_delete_booking_delete_payment.py
  apps.py
  tests.py
navigation/
  migrations/
    0001_initial.py
    0002_navigationsettings.py
  admin.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
scheduling/
  migrations/
    0001_initial.py
    0002_alter_availability_mentor.py
    0003_alter_availability_mentor.py
    0004_booking_status.py
    0005_delete_booking.py
    0006_timeslot_booking.py
    0007_remove_booking_timeslot_booking_availability_and_more.py
    0008_remove_booking_time_block_and_more.py
    0009_alter_booking_unique_together_and_more.py
    0010_alter_availability_mentor_alter_booking_mentor_and_more.py
    0011_delete_booking.py
    0012_alter_timeslot_unique_together_and_more.py
    0013_availability_timeslot_delete_googlecredentials.py
    0014_alter_timeslot_unique_together_and_more.py
    0015_availability_timeslot_delete_googlecredentials.py
  admin.py
  apps.py
  models.py
  razorpay_service.py
  serializers.py
  tests.py
  urls.py
  utils.py
  views.py
secrets/
  client_secret.json
time_blocks/
  migrations/
    0001_initial.py
    0002_timeblock_price_alter_timeblock_duration.py
    0003_remove_timeblock_price.py
  admin.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
tools/
  migrations/
    0001_initial.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
webadmin/
  management/
    commands/
      bulk_upload_categories.py
  migrations/
    0001_initial.py
    0002_custompage.py
    0003_category_companylogo_faq_and_more.py
    0004_cardsection_ceo_homepage_section_title_and_more.py
    0005_mentoringcta.py
    0006_menttalkcta.py
    0007_footer_sociallinks_footerlink_footer_social_links.py
    0008_alter_footer_company_name_alter_footer_copyright_and_more.py
    0009_blogcard_boardofadvisor_corevalue_ctabutton_and_more.py
    0010_teammates.py
    0011_aboutpage_teammates.py
    0012_teammates_linkedinurl_teammates_position.py
  templates/
    admin/
      solo/
        change_form.html
      category_changelist.html
      csv_form.html
  admin.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
workex/
  migrations/
    0001_initial.py
    0002_workexperience_mentor.py
    0003_alter_workexperience_mentor.py
    0004_remove_workexperience_industry_expertise_and_more.py
  admin.py
  apps.py
  models.py
  serializers.py
  tests.py
  urls.py
  views.py
Xperts/
  asgi.py
  custom_email_backend.py
  settings.py
  urls.py
  wsgi.py
manage.py
requirements.txt

================================================================
Repository Files
================================================================

================
File: articles/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-06-18 20:09

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0007_remove_mentor_content_links_delete_contentlink_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('url', models.URLField()),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='core.mentor')),
            ],
        ),
    ]

================
File: articles/migrations/0002_alter_article_mentor.py
================
# Generated by Django 5.0 on 2024-06-18 20:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='article',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to=settings.AUTH_USER_MODEL),
        ),
    ]

================
File: articles/admin.py
================
# articles/admin.py
from django.contrib import admin
from .models import Article

class ArticleInline(admin.TabularInline):
    model = Article
    extra = 1

admin.site.register(Article)

================
File: articles/apps.py
================
from django.apps import AppConfig


class ArticlesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'articles'

================
File: articles/models.py
================
from django.db import models
from django.conf import settings

class Article(models.Model):
    title = models.CharField(max_length=255)
    url = models.URLField()
    mentor = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='articles', on_delete=models.CASCADE)
    def __str__(self):
        return self.title

================
File: articles/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: articles/views.py
================
from django.shortcuts import render

# Create your views here.

================
File: automation/migrations/0001_initial.py
================
# Generated by Django 5.1.1 on 2024-10-04 00:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GoogleCredentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credentials', models.JSONField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: automation/admin.py
================
from django.contrib import admin
from .models import GoogleCredentials

@admin.register(GoogleCredentials)
class GoogleCredentialsAdmin(admin.ModelAdmin):
    list_display = ['user']

================
File: automation/apps.py
================
from django.apps import AppConfig


class AutomationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'automation'

================
File: automation/models.py
================
from django.db import models
from django.contrib.auth import get_user_model
from google.oauth2.credentials import Credentials

User = get_user_model()

class GoogleCredentials(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    credentials = models.JSONField()

    def save_credentials(self, credentials):
        self.credentials = credentials_to_dict(credentials)
        self.save()

    def get_credentials(self):
        return Credentials(**self.credentials)

def credentials_to_dict(credentials):
    return {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes,
    }

================
File: automation/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: automation/urls.py
================
# automation/urls.py
from django.urls import path
from .views import google_auth, oauth2callback

urlpatterns = [
    path('google-auth/', google_auth, name='google_auth'),
    path('oauth2callback/', oauth2callback, name='oauth2callback'),
]

================
File: automation/utils.py
================
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from datetime import datetime

def create_google_meet_event(mentor_credentials, mentee_email, start_time, end_time):
    try:
        service = build('calendar', 'v3', credentials=mentor_credentials)
        
        event = {
            'summary': 'Mentorship Session',
            'description': 'Google Meet session between mentor and mentee.',
            'start': {
                'dateTime': start_time.isoformat(),
                'timeZone': 'Asia/Kolkata',  # Change to your timezone if different
            },
            'end': {
                'dateTime': end_time.isoformat(),
                'timeZone': 'Asia/Kolkata',
            },
            'attendees': [
                {'email': mentee_email},  # Mentee's email
            ],
            'conferenceData': {
                'createRequest': {
                    'conferenceSolutionKey': {
                        'type': 'hangoutsMeet',
                    },
                    'requestId': 'random-string-' + str(datetime.now().timestamp()).replace('.', ''),
                },
            },
        }

        event = service.events().insert(calendarId='primary', body=event, conferenceDataVersion=1).execute()
        return event.get('hangoutLink')

    except HttpError as error:
        print(f"An error occurred: {error}")
        return None

================
File: automation/views.py
================
from google_auth_oauthlib.flow import Flow
from django.shortcuts import redirect
from django.conf import settings
from .models import GoogleCredentials,credentials_to_dict
from django.contrib.auth.decorators import login_required

@login_required
def google_auth(request):
    flow = Flow.from_client_secrets_file(
        settings.GOOGLE_OAUTH_CLIENT_SECRETS,
        scopes=['https://www.googleapis.com/auth/calendar'],
        redirect_uri=settings.GOOGLE_OAUTH_REDIRECT_URI
    )
    
    authorization_url, state = flow.authorization_url(
        access_type='offline',
        include_granted_scopes='true'
    )
    
    request.session['state'] = state
    return redirect(authorization_url)

@login_required
def oauth2callback(request):
    flow = Flow.from_client_secrets_file(
        settings.GOOGLE_OAUTH_CLIENT_SECRETS,
        scopes=['https://www.googleapis.com/auth/calendar'],
        state=request.session['state'],
        redirect_uri=settings.GOOGLE_OAUTH_REDIRECT_URI
    )
    
    flow.fetch_token(authorization_response=request.get_full_path())
    credentials = flow.credentials

    # Save credentials in the GoogleCredentials model
    GoogleCredentials.objects.create(user=request.user, credentials=credentials_to_dict(credentials))
    
    return redirect('some-success-url')  # Redirect after successful connection

================
File: blogs/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-07-19 12:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: blogs/migrations/0002_alter_blogpost_content.py
================
# Generated by Django 5.0 on 2024-07-19 14:13

import ckeditor.fields
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('blogs', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='blogpost',
            name='content',
            field=ckeditor.fields.RichTextField(),
        ),
    ]

================
File: blogs/migrations/0003_blogpost_thumbnail.py
================
# Generated by Django 5.0 on 2024-07-19 16:12

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blogs', '0002_alter_blogpost_content'),
    ]

    operations = [
        migrations.AddField(
            model_name='blogpost',
            name='thumbnail',
            field=models.ImageField(blank=True, null=True, upload_to='blog_thumbnails/'),
        ),
    ]

================
File: blogs/migrations/0004_blogpost_meta_description_blogpost_meta_title_and_more.py
================
# Generated by Django 5.0 on 2024-07-19 16:17

import ckeditor_uploader.fields
import taggit.managers
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blogs', '0003_blogpost_thumbnail'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.AddField(
            model_name='blogpost',
            name='meta_description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='meta_title',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='og_description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='og_image',
            field=models.ImageField(blank=True, null=True, upload_to='og_images/'),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='og_title',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AlterField(
            model_name='blogpost',
            name='content',
            field=ckeditor_uploader.fields.RichTextUploadingField(),
        ),
    ]

================
File: blogs/admin.py
================
from django.contrib import admin
from .models import BlogPost

@admin.register(BlogPost)
class BlogPostAdmin(admin.ModelAdmin):
    list_display = ('title', 'author', 'created_at', 'updated_at')
    search_fields = ('title', 'author__username')
    list_filter = ('created_at', 'updated_at')
    ordering = ('-created_at',)
    fieldsets = (
        (None, {
            'fields': ('title', 'author', 'content', 'thumbnail', 'tags')
        }),
        ('SEO Fields', {
            'fields': ('meta_title', 'meta_description')
        }),
        ('Open Graph Fields', {
            'fields': ('og_title', 'og_description', 'og_image')
        }),
    )

================
File: blogs/apps.py
================
from django.apps import AppConfig


class BlogsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'blogs'

================
File: blogs/models.py
================
from django.db import models
from django.conf import settings
from ckeditor_uploader.fields import RichTextUploadingField
from taggit.managers import TaggableManager

class BlogPost(models.Model):
    title = models.CharField(max_length=255)
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    content = RichTextUploadingField()
    thumbnail = models.ImageField(upload_to='blog_thumbnails/', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    # SEO and OG fields
    meta_title = models.CharField(max_length=255, blank=True, null=True)
    meta_description = models.TextField(blank=True, null=True)
    og_title = models.CharField(max_length=255, blank=True, null=True)
    og_description = models.TextField(blank=True, null=True)
    og_image = models.ImageField(upload_to='og_images/', blank=True, null=True)

    # Keyword tags
    tags = TaggableManager()

    def __str__(self):
        return self.title

================
File: blogs/permissions.py
================
from rest_framework.permissions import BasePermission

class IsAdminOrMentor(BasePermission):
    def has_permission(self, request, view):
        return request.user and (request.user.is_staff or request.user.user_type == 'mentor')

================
File: blogs/serializers.py
================
# blogs/serializers.py
from rest_framework import serializers
from .models import BlogPost

class BlogPostSerializer(serializers.ModelSerializer):
    class Meta:
        model = BlogPost
        fields = '__all__'

================
File: blogs/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: blogs/urls.py
================
# blogs/urls.py
from django.urls import path
from .views import BlogPostListCreateView, BlogPostDetailView

urlpatterns = [
    path('blogs/', BlogPostListCreateView.as_view(), name='blog-list-create'),
    path('blogs/<int:pk>/', BlogPostDetailView.as_view(), name='blog-detail'),
]

================
File: blogs/views.py
================
# blogs/views.py
from rest_framework import generics
from rest_framework.permissions import AllowAny
from .models import BlogPost
from .serializers import BlogPostSerializer

class BlogPostListCreateView(generics.ListCreateAPIView):
    queryset = BlogPost.objects.all()
    serializer_class = BlogPostSerializer
    permission_classes = [AllowAny]  # Allow any user to access this view

class BlogPostDetailView(generics.RetrieveAPIView):
    queryset = BlogPost.objects.all()
    serializer_class = BlogPostSerializer
    permission_classes = [AllowAny]  # Allow any user to access this view

================
File: booking/migrations/0001_initial.py
================
# Generated by Django 5.1.1 on 2024-09-30 16:08

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('scheduling', '0011_delete_booking'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('payment_status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('availability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='scheduling.availability')),
                ('mentee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentee_bookings', to=settings.AUTH_USER_MODEL)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='scheduling.timeslot')),
            ],
            options={
                'unique_together': {('mentor', 'mentee', 'start_time', 'end_time')},
            },
        ),
    ]

================
File: booking/admin.py
================
from django.contrib import admin
from .models import Booking

@admin.register(Booking)
class BookingAdmin(admin.ModelAdmin):
    list_display = ('mentor', 'mentee', 'start_time', 'end_time', 'payment_status', 'created_at')
    list_filter = ('mentor', 'payment_status')
    search_fields = ('mentor__username', 'mentee__username')

================
File: booking/apps.py
================
from django.apps import AppConfig


class BookingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'booking'

================
File: booking/models.py
================
from django.db import models
from scheduling.models import Availability, TimeSlot
from django.conf import settings
from core.models import CustomUser

class Booking(models.Model):
    mentor = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='bookings')
    mentee = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='mentee_bookings')
    availability = models.ForeignKey(Availability, on_delete=models.CASCADE, related_name='bookings')
    time_slot = models.ForeignKey(TimeSlot, on_delete=models.CASCADE, related_name='bookings')
    start_time = models.TimeField()
    end_time = models.TimeField()
    payment_status = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('mentor', 'mentee', 'start_time', 'end_time')

    def __str__(self):
        return f'Booking with {self.mentor.username} by {self.mentee.username} from {self.start_time} to {self.end_time}'

================
File: booking/razorpay_service.py
================
import razorpay
from django.conf import settings

# Initialize Razorpay client with your keys
razorpay_client = razorpay.Client(auth=(settings.RAZORPAY_API_KEY, settings.RAZORPAY_API_SECRET))

def create_razorpay_order(booking):
    """
    Create Razorpay order for the given booking.
    """
    order_amount = int(booking.time_slot.price * 100)  # Razorpay accepts the amount in paise
    order_currency = 'INR'
    order_receipt = f'booking_{booking.id}'

    razorpay_order = razorpay_client.order.create({
        'amount': order_amount,
        'currency': order_currency,
        'receipt': order_receipt,
        'payment_capture': '1'  # Auto-capture the payment
    })

    return razorpay_order


def verify_payment(razorpay_payment_id, razorpay_order_id, razorpay_signature):
    """
    Verify Razorpay payment.
    """
    try:
        razorpay_client.utility.verify_payment_signature({
            'razorpay_payment_id': razorpay_payment_id,
            'razorpay_order_id': razorpay_order_id,
            'razorpay_signature': razorpay_signature
        })
        return True
    except razorpay.errors.SignatureVerificationError:
        return False

================
File: booking/serializers.py
================
from rest_framework import serializers
from .models import Booking
from scheduling.models import Availability, TimeSlot

class BookingSerializer(serializers.ModelSerializer):
    availability = serializers.PrimaryKeyRelatedField(queryset=Availability.objects.all())
    time_slot = serializers.PrimaryKeyRelatedField(queryset=TimeSlot.objects.all())

    class Meta:
        model = Booking
        fields = ['availability', 'time_slot', 'start_time', 'end_time', 'payment_status']

    def create(self, validated_data):
        availability = validated_data['availability']
        time_slot = validated_data['time_slot']
        start_time = validated_data['start_time']
        end_time = validated_data['end_time']
        mentee = self.context['request'].user  # Mentee is the logged-in user
        mentor = availability.mentor  # Mentor is inferred from availability

        # Ensure the time slot and availability are for the same mentor
        if time_slot.mentor != mentor:
            raise serializers.ValidationError("The selected time slot does not belong to the specified mentor.")
        
        # Check for overlapping bookings
        overlapping_bookings = Booking.objects.filter(
            mentor=mentor,
            availability=availability,
            start_time__lt=end_time,
            end_time__gt=start_time
        )

        if overlapping_bookings.exists():
            raise serializers.ValidationError("The selected time slot is already booked.")

        return Booking.objects.create(
            mentor=mentor,
            mentee=mentee,
            availability=availability,
            time_slot=time_slot,
            start_time=start_time,
            end_time=end_time,
            payment_status=False  # Set default to false for new bookings
        )

================
File: booking/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: booking/urls.py
================
from django.urls import path
from .views import CreateBookingView, VerifyPaymentView

urlpatterns = [
    path('create-booking/', CreateBookingView.as_view(), name='create-booking'),
    path('verify-payment/', VerifyPaymentView.as_view(), name='verify-payment'),
]

================
File: booking/views.py
================
from rest_framework import generics, status
from rest_framework.response import Response
from .models import Booking
from .serializers import BookingSerializer
from scheduling.models import Availability, TimeSlot
from core.models import Mentor,Payment
from .razorpay_service import create_razorpay_order, verify_payment
from django.shortcuts import get_object_or_404
from rest_framework.permissions import IsAuthenticated
import logging
from django.conf import settings

logger = logging.getLogger(__name__)


class CreateBookingView(generics.CreateAPIView):
    queryset = Booking.objects.all()
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated]

    def create(self, request, *args, **kwargs):
        logger.info("CreateBookingView - Request Data: %s", request.data)

        # Extract required fields from request data
        mentor_id = request.data.get('mentor_id')
        availability_id = request.data.get('availability_id')
        time_slot_id = request.data.get('time_slot_id')
        start_time = request.data.get('start_time')
        end_time = request.data.get('end_time')

        # Validate that required fields are provided
        if not all([mentor_id, availability_id, time_slot_id, start_time, end_time]):
            return Response({"error": "Mentor ID, Availability ID, Time Slot ID, Start Time, and End Time are required."}, status=status.HTTP_400_BAD_REQUEST)

        # Fetch the mentor, availability, and time slot instances
        mentor = get_object_or_404(Mentor, id=mentor_id)
        availability = get_object_or_404(Availability, id=availability_id)
        time_slot = get_object_or_404(TimeSlot, id=time_slot_id)

        # Check if the time slot belongs to the selected mentor
        if time_slot.mentor != mentor or availability.mentor != mentor:
            return Response({"error": "Time Slot and Availability do not belong to the selected mentor."}, status=status.HTTP_400_BAD_REQUEST)

        # Check for overlapping bookings
        overlapping_bookings = Booking.objects.filter(
            mentor=mentor,
            availability=availability,
            start_time__lt=end_time,
            end_time__gt=start_time
        )

        if overlapping_bookings.exists():
            return Response({"error": "The selected time slot is already booked."}, status=status.HTTP_409_CONFLICT)

        # Prepare data for the booking
        booking_data = {
            'mentor': mentor.id,
            'mentee': request.user.id,
            'availability': availability.id,
            'time_slot': time_slot.id,
            'start_time': start_time,
            'end_time': end_time,
            'payment_status': False
        }

        # Validate and save the booking using the serializer
        serializer = self.get_serializer(data=booking_data)
        serializer.is_valid(raise_exception=True)
        booking = serializer.save()

        # Create Razorpay order
        amount = time_slot.price * 100  # Razorpay accepts amount in paise
        razorpay_order = client.order.create({
            'amount': amount,
            'currency': 'INR',
            'payment_capture': '1'
        })

        # Create a Payment entry linked to the booking
        Payment.objects.create(
            booking=booking,
            razorpay_order_id=razorpay_order['id'],
            amount=time_slot.price,
            status='Pending'
        )

        # Return Razorpay order details for frontend payment processing
        return Response({
            'razorpay_order_id': razorpay_order['id'],
            'razorpay_key': settings.RAZORPAY_API_KEY,
            'amount': amount,
            'currency': 'INR',
            'booking_id': booking.id
        }, status=status.HTTP_201_CREATED)


class VerifyPaymentView(generics.GenericAPIView):
    def post(self, request, *args, **kwargs):
        payment_id = request.data.get('razorpay_payment_id')
        order_id = request.data.get('razorpay_order_id')
        signature = request.data.get('razorpay_signature')
        booking_id = request.data.get('booking_id')

        if verify_payment(payment_id, order_id, signature):
            booking = Booking.objects.get(id=booking_id)
            booking.payment_status = True
            booking.save()
            return Response({'status': 'Payment successful, booking confirmed!'}, status=status.HTTP_200_OK)
        else:
            return Response({'status': 'Payment verification failed!'}, status=status.HTTP_400_BAD_REQUEST)

================
File: cohorts/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-08-11 07:51

import cohorts.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0019_remove_customuser_otp_otp'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('takeaways', models.TextField()),
                ('introductory_video', models.URLField(blank=True, null=True, validators=[cohorts.models.validate_youtube_url])),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('link', models.URLField()),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cohorts', to='core.mentor')),
            ],
        ),
    ]

================
File: cohorts/migrations/0002_cohortregistration_payment.py
================
# Generated by Django 5.0 on 2024-08-11 08:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CohortRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('payment_status', models.CharField(default='Pending', max_length=20)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='cohorts.cohort')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cohort_registrations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_status', models.CharField(default='pending', max_length=20)),
                ('payment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cohorts.cohort')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: cohorts/migrations/0003_rename_payment_date_cohortregistration_registered_at_and_more.py
================
# Generated by Django 5.0 on 2024-08-27 17:00

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0002_cohortregistration_payment'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RenameField(
            model_name='cohortregistration',
            old_name='payment_date',
            new_name='registered_at',
        ),
        migrations.RenameField(
            model_name='payment',
            old_name='payment_date',
            new_name='created_at',
        ),
        migrations.RemoveField(
            model_name='cohortregistration',
            name='amount_paid',
        ),
        migrations.RemoveField(
            model_name='cohortregistration',
            name='payment_status',
        ),
        migrations.AlterField(
            model_name='cohortregistration',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='payment',
            name='cohort',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='cohorts.cohort'),
        ),
        migrations.AlterField(
            model_name='payment',
            name='payment_id',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='payment',
            name='payment_status',
            field=models.CharField(choices=[('created', 'Created'), ('successful', 'Successful'), ('failed', 'Failed')], max_length=20),
        ),
        migrations.AlterField(
            model_name='payment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL),
        ),
    ]

================
File: cohorts/migrations/0004_alter_payment_payment_id.py
================
# Generated by Django 5.0 on 2024-08-27 18:02

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0003_rename_payment_date_cohortregistration_registered_at_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='payment_id',
            field=models.CharField(default=1, max_length=255),
        ),
    ]

================
File: cohorts/migrations/0005_alter_payment_payment_id.py
================
# Generated by Django 5.0 on 2024-08-27 18:05

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0004_alter_payment_payment_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='payment_id',
            field=models.CharField(max_length=255),
        ),
    ]

================
File: cohorts/migrations/0006_rename_payment_id_payment_razorpay_payment_id.py
================
# Generated by Django 5.0 on 2024-08-28 16:00

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0005_alter_payment_payment_id'),
    ]

    operations = [
        migrations.RenameField(
            model_name='payment',
            old_name='payment_id',
            new_name='razorpay_payment_id',
        ),
    ]

================
File: cohorts/migrations/0007_payment_order_id_alter_payment_razorpay_payment_id.py
================
# Generated by Django 5.0 on 2024-08-28 16:19

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0006_rename_payment_id_payment_razorpay_payment_id'),
    ]

    operations = [
        migrations.AddField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='TEMP', editable=False, max_length=10, unique=True),
        ),
        migrations.AlterField(
            model_name='payment',
            name='razorpay_payment_id',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
    ]

================
File: cohorts/migrations/0008_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 16:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0007_payment_order_id_alter_payment_razorpay_payment_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='TEMP', editable=False, max_length=10),
        ),
    ]

================
File: cohorts/migrations/0009_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 16:22

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0008_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='TEMP', editable=False, max_length=10, unique=True),
        ),
    ]

================
File: cohorts/migrations/0010_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 16:52

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0009_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default=uuid.uuid4, max_length=100, unique=True),
        ),
    ]

================
File: cohorts/migrations/0011_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 17:04

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0010_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='d7dddab4-70ee-4004-ad8c-04e96fded3f3', max_length=100, unique=True),
        ),
    ]

================
File: cohorts/migrations/0012_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 17:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0011_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='def35903-95db-4efc-9692-795a52683c4a', max_length=100, unique=True),
        ),
    ]

================
File: cohorts/migrations/0013_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 17:40

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0012_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='150fc4b3-bf4f-4cb6-9582-06d2dfdb31ae', max_length=100, unique=True),
        ),
    ]

================
File: cohorts/migrations/0014_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 18:12

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0013_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='fc311f7c-6c4b-48d0-8fdb-fc0f4fd1eece', max_length=100, unique=True),
        ),
    ]

================
File: cohorts/migrations/0015_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 18:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0014_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='b48504dc-4fe2-4c0a-86c9-351cab522bfe', max_length=100, unique=True),
        ),
    ]

================
File: cohorts/migrations/0016_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 18:28

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0015_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='27d930c9-16da-4a02-b8a7-bce4425788e1', max_length=100, unique=True),
        ),
    ]

================
File: cohorts/migrations/0017_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 18:30

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0016_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='', editable=False, max_length=10, unique=True),
        ),
    ]

================
File: cohorts/migrations/0018_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 18:45

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0017_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='b6b003fd-b77c-4b1f-8989-c04055ea41db', max_length=100, unique=True),
        ),
    ]

================
File: cohorts/migrations/0019_alter_payment_order_id.py
================
# Generated by Django 5.0 on 2024-08-28 18:45

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0018_alter_payment_order_id'),
    ]

    operations = [
        migrations.AlterField(
            model_name='payment',
            name='order_id',
            field=models.CharField(default='4ab6d49b-5a7f-446c-8ed9-e3dae4ffad47', max_length=100, unique=True),
        ),
    ]

================
File: cohorts/migrations/0020_rename_created_at_payment_payment_date_and_more.py
================
# Generated by Django 5.0 on 2024-08-29 08:55

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0019_alter_payment_order_id'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RenameField(
            model_name='payment',
            old_name='created_at',
            new_name='payment_date',
        ),
        migrations.RemoveField(
            model_name='payment',
            name='cohort',
        ),
        migrations.RemoveField(
            model_name='payment',
            name='order_id',
        ),
        migrations.AddField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 8, 55, 25, 730788, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AddField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 8, 55, 25, 730605, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AddField(
            model_name='cohortregistration',
            name='payment_status',
            field=models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed')], default='Pending', max_length=20),
        ),
        migrations.AddField(
            model_name='payment',
            name='cohort_registration',
            field=models.OneToOneField(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='cohorts.cohortregistration'),
        ),
        migrations.AddField(
            model_name='payment',
            name='razorpay_order_id',
            field=models.CharField(blank=True, max_length=255, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='cohortregistration',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cohort_registrations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='payment',
            name='payment_status',
            field=models.CharField(choices=[('Pending', 'Pending'), ('Success', 'Success'), ('Failed', 'Failed')], default='Pending', max_length=20),
        ),
        migrations.AlterField(
            model_name='payment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]

================
File: cohorts/migrations/0021_alter_cohort_end_date_alter_cohort_start_date_and_more.py
================
# Generated by Django 5.0 on 2024-08-29 08:57

import datetime
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0020_rename_created_at_payment_payment_date_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 8, 57, 29, 685518, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 8, 57, 29, 685345, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='payment',
            name='cohort_registration',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='cohorts.cohortregistration'),
        ),
    ]

================
File: cohorts/migrations/0022_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-29 08:58

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0021_alter_cohort_end_date_alter_cohort_start_date_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 8, 58, 8, 396340, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 8, 58, 8, 396168, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0023_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-29 08:58

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0022_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 8, 58, 55, 29127, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 8, 58, 55, 28930, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0024_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-29 11:32

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0023_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 11, 32, 11, 172199, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 11, 32, 11, 172010, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0025_payment_razorpay_signature_payment_verified_and_more.py
================
# Generated by Django 5.0 on 2024-08-29 12:29

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0024_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AddField(
            model_name='payment',
            name='razorpay_signature',
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='payment',
            name='verified',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 12, 29, 10, 333765, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 12, 29, 10, 333526, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0026_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-29 12:58

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0025_payment_razorpay_signature_payment_verified_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 12, 58, 43, 580992, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 12, 58, 43, 580812, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0027_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-29 13:27

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0026_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 13, 27, 54, 879926, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 13, 27, 54, 879715, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0028_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-29 13:46

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0027_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 13, 46, 36, 811597, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 13, 46, 36, 811389, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0029_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-29 14:02

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0028_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 14, 2, 27, 710950, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 14, 2, 27, 710739, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0030_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-29 17:37

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0029_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 17, 37, 42, 821626, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 17, 37, 42, 821455, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0031_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-29 17:52

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0030_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 17, 52, 29, 706905, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 28, 17, 52, 29, 706718, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0032_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-30 08:34

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0031_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 29, 8, 34, 9, 879248, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 29, 8, 34, 9, 879067, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0033_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-30 12:12

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0032_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 29, 12, 12, 12, 721518, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 29, 12, 12, 12, 721314, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0034_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.0 on 2024-08-30 12:19

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0033_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 29, 12, 19, 36, 445117, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 9, 29, 12, 19, 36, 444933, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0035_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 10:19

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0034_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 10, 19, 39, 769123, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 10, 19, 39, 768974, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0036_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 17:04

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0035_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 17, 4, 45, 928815, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 17, 4, 45, 928618, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0037_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 18:09

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0036_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 18, 9, 6, 81072, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 18, 9, 6, 80909, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0038_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 18:25

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0037_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 18, 25, 49, 903641, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 18, 25, 49, 903455, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0039_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 20:16

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0038_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 20, 15, 59, 894004, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 20, 15, 59, 893816, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0040_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 20:28

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0039_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 20, 28, 34, 568831, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 20, 28, 34, 568649, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0041_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 21:00

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0040_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 21, 0, 28, 539341, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 21, 0, 28, 539107, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0042_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 21:09

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0041_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 21, 9, 17, 388440, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 21, 9, 17, 388231, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0043_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 22:06

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0042_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 22, 6, 0, 591336, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 22, 6, 0, 591117, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0044_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 22:10

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0043_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 22, 10, 7, 294924, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 22, 10, 7, 294735, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0045_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 22:29

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0044_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 22, 29, 53, 211939, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 22, 29, 53, 211600, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0046_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1 on 2024-09-03 22:31

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0045_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 22, 31, 10, 803362, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 3, 22, 31, 10, 803180, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0047_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-04 15:50

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0046_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 4, 15, 50, 8, 195081, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 4, 15, 50, 8, 194894, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0048_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-04 15:54

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0047_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 4, 15, 54, 55, 764051, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 4, 15, 54, 55, 763898, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0049_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-04 16:09

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0048_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 4, 16, 9, 31, 212745, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 4, 16, 9, 31, 212543, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0050_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-04 16:38

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0049_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 4, 16, 38, 33, 579377, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 4, 16, 38, 33, 579209, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0051_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-10 20:21

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0050_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 10, 20, 21, 28, 354894, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 10, 20, 21, 28, 354685, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0052_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-10 21:25

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0051_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 10, 21, 25, 36, 961784, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 10, 21, 25, 36, 961594, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0053_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-12 12:54

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0052_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 12, 54, 50, 798372, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 12, 54, 50, 798193, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0054_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-12 12:55

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0053_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 12, 55, 27, 739262, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 12, 55, 27, 739068, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0055_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-12 17:28

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0054_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 17, 28, 25, 192925, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 17, 28, 25, 192727, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0056_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-12 18:59

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0055_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 18, 59, 46, 488218, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 18, 59, 46, 488047, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0057_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-12 19:04

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0056_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 19, 4, 45, 450185, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 19, 4, 45, 450027, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0058_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-12 19:06

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0057_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 19, 6, 7, 141154, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 19, 6, 7, 141002, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0059_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-12 19:56

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0058_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 19, 56, 0, 683055, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 19, 56, 0, 682894, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0060_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-12 20:35

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0059_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 20, 35, 29, 837824, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 12, 20, 35, 29, 837670, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0061_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-13 12:06

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0060_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 12, 6, 41, 39059, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 12, 6, 41, 38889, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0062_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-13 12:14

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0061_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 12, 14, 34, 579327, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 12, 14, 34, 579164, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0063_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-13 18:51

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0062_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 18, 51, 43, 352543, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 18, 51, 43, 352333, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0064_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-13 20:39

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0063_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 20, 39, 22, 964138, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 20, 39, 22, 963973, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0065_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-13 20:43

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0064_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 20, 43, 50, 10222, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 20, 43, 50, 10044, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0066_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-13 20:48

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0065_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 20, 48, 38, 726588, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 20, 48, 38, 726419, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0067_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-13 21:25

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0066_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 21, 25, 56, 571962, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 13, 21, 25, 56, 571803, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0068_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-14 20:23

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0067_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 14, 20, 23, 58, 49229, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 14, 20, 23, 58, 49084, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0069_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-14 20:52

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0068_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 14, 20, 52, 43, 78952, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 14, 20, 52, 43, 78799, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0070_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-24 19:22

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0069_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 24, 19, 22, 49, 695082, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 24, 19, 22, 49, 694913, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0071_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-24 19:47

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0070_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 24, 19, 47, 57, 85946, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 24, 19, 47, 57, 85736, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0072_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-25 18:50

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0071_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 25, 18, 50, 46, 881236, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 25, 18, 50, 46, 881042, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0073_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-25 18:51

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0072_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 25, 18, 51, 51, 585798, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 25, 18, 51, 51, 585566, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0074_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-26 13:24

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0073_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 13, 24, 31, 197862, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 13, 24, 31, 197682, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0075_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-26 13:54

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0074_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 13, 54, 52, 147536, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 13, 54, 52, 147351, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0076_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-26 13:56

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0075_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 13, 56, 41, 702266, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 13, 56, 41, 702059, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0077_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-26 14:00

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0076_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 0, 56, 783044, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 0, 56, 782787, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0078_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-26 14:16

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0077_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 16, 20, 986424, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 16, 20, 986267, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0079_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-26 14:18

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0078_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 18, 15, 316251, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 18, 15, 316089, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0080_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-26 14:18

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0079_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 18, 46, 966421, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 18, 46, 966240, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0081_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-26 14:28

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0080_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 28, 32, 187081, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 28, 32, 186907, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0082_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-26 14:30

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0081_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 30, 49, 857987, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 26, 14, 30, 49, 857838, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0083_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-27 19:40

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0082_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 27, 19, 40, 59, 6657, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 27, 19, 40, 59, 6463, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0084_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-27 20:00

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0083_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 27, 20, 0, 19, 949081, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 27, 20, 0, 19, 948922, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0085_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-27 20:14

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0084_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 27, 20, 14, 9, 774735, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 27, 20, 14, 9, 774574, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0086_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-27 20:37

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0085_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 27, 20, 37, 20, 237270, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 27, 20, 37, 20, 237086, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0087_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:22

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0086_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 22, 7, 783655, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 22, 7, 783486, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0088_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:23

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0087_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 23, 31, 156554, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 23, 31, 156373, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0089_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:24

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0088_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 24, 25, 775572, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 24, 25, 775334, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0090_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:28

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0089_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 28, 43, 308302, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 28, 43, 308108, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0091_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:31

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0090_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 31, 4, 923700, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 31, 4, 923485, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0092_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:49

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0091_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 49, 24, 761578, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 49, 24, 761383, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0093_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:51

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0092_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 51, 9, 448631, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 51, 9, 448464, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0094_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:52

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0093_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 52, 31, 375931, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 52, 31, 375609, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0095_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:55

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0094_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 55, 6, 298210, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 28, 17, 55, 6, 298030, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0096_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-30 16:01

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0095_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 16, 1, 6, 797832, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 16, 1, 6, 797643, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0097_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-30 16:08

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0096_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 16, 8, 15, 517216, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 16, 8, 15, 517033, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0098_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-30 16:09

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0097_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 16, 9, 8, 464165, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 16, 9, 8, 463987, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0099_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-30 16:17

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0098_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 16, 17, 20, 326665, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 16, 17, 20, 326440, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0100_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-30 18:42

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0099_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 18, 42, 55, 992179, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 18, 42, 55, 991949, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0101_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-30 19:29

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0100_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 19, 29, 40, 366602, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 19, 29, 40, 366370, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0102_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-30 19:55

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0101_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 19, 55, 39, 494209, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 19, 55, 39, 493950, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0103_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-09-30 21:53

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0102_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 21, 53, 49, 188287, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 10, 30, 21, 53, 49, 187960, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0104_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 10:10

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0103_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 10, 10, 55, 840370, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 10, 10, 55, 840156, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0105_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 19:20

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0104_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 19, 20, 47, 16883, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 19, 20, 47, 16626, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0106_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 19:20

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0105_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 19, 20, 52, 386769, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 19, 20, 52, 386514, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0107_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:24

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0106_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 24, 16, 456393, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 24, 16, 456160, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0108_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:26

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0107_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 26, 18, 231369, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 26, 18, 231129, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0109_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:26

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0108_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 26, 37, 544330, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 26, 37, 543965, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0110_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:32

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0109_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 32, 36, 158202, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 32, 36, 157983, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0111_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:33

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0110_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 33, 11, 631981, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 33, 11, 631693, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0112_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:35

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0111_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 35, 24, 417087, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 35, 24, 416844, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0113_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:37

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0112_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 37, 33, 174900, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 37, 33, 174666, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0114_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:39

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0113_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 39, 36, 804000, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 39, 36, 803743, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0115_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:42

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0114_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 42, 34, 167643, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 42, 34, 167415, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0116_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:44

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0115_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 44, 41, 227399, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 44, 41, 227176, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0117_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:50

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0116_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 50, 53, 921357, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 50, 53, 921122, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0118_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:53

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0117_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 53, 30, 961561, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 21, 53, 30, 961313, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0119_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 22:37

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0118_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 22, 37, 28, 362019, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 22, 37, 28, 361823, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0120_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-03 23:16

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0119_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 23, 16, 16, 541370, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 2, 23, 16, 16, 541077, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0121_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-04 00:19

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0120_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 3, 0, 19, 43, 708479, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 3, 0, 19, 43, 708231, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0122_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-04 00:28

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0121_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 3, 0, 28, 1, 71186, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 3, 0, 28, 1, 70913, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/migrations/0123_alter_cohort_end_date_alter_cohort_start_date.py
================
# Generated by Django 5.1.1 on 2024-10-04 01:20

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cohorts', '0122_alter_cohort_end_date_alter_cohort_start_date'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cohort',
            name='end_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 3, 1, 20, 25, 862910, tzinfo=datetime.timezone.utc)),
        ),
        migrations.AlterField(
            model_name='cohort',
            name='start_date',
            field=models.DateTimeField(default=datetime.datetime(2024, 11, 3, 1, 20, 25, 862527, tzinfo=datetime.timezone.utc)),
        ),
    ]

================
File: cohorts/admin.py
================
from django.contrib import admin
from .models import Cohort, CohortRegistration, Payment

@admin.register(Cohort)
class CohortAdmin(admin.ModelAdmin):
    list_display = ('name', 'mentor', 'start_date', 'end_date', 'price')
    search_fields = ('name', 'description', 'mentor__username')
    list_filter = ('start_date', 'end_date', 'price')
    ordering = ('-start_date',)

@admin.register(CohortRegistration)
class CohortRegistrationAdmin(admin.ModelAdmin):
    list_display = ('get_cohort_name', 'user', 'get_mentor_name', 'registered_at', 'payment_status')
    search_fields = ('user__username', 'cohort__name')
    list_filter = ('payment_status', 'registered_at')
    ordering = ('-registered_at',)
    autocomplete_fields = ['cohort', 'user']  # Cohort first, then user

    # Define the order of fields in the admin form
    fields = ['cohort', 'user', 'payment_status']

    def get_cohort_name(self, obj):
        return obj.cohort.name
    get_cohort_name.short_description = 'Cohort'

    def get_mentor_name(self, obj):
        return obj.cohort.mentor.username
    get_mentor_name.short_description = 'Mentor'

@admin.register(Payment)
class PaymentAdmin(admin.ModelAdmin):
    list_display = ('get_cohort_name', 'user', 'amount', 'payment_status', 'payment_date', 'razorpay_order_id', 'razorpay_payment_id', 'verified')
    search_fields = ('user__username', 'cohort_registration__cohort__name', 'razorpay_order_id', 'razorpay_signature')
    list_filter = ('payment_status', 'payment_date', 'verified')
    ordering = ('-payment_date',)
    autocomplete_fields = ['cohort_registration', 'user']  # Cohort Registration first, then user

    # Define the order of fields in the admin form, excluding razorpay_signature and payment_date since they are non-editable
    fields = ['cohort_registration', 'user', 'amount', 'razorpay_order_id', 'razorpay_payment_id', 'payment_status', 'verified']

    def get_cohort_name(self, obj):
        return obj.cohort_registration.cohort.name
    get_cohort_name.short_description = 'Cohort'

================
File: cohorts/apps.py
================
from django.apps import AppConfig


class CohortsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'cohorts'

================
File: cohorts/models.py
================
from django.db import models
from core.models import Mentor, CustomUser
from django.core.exceptions import ValidationError 
import re# Assuming this is defined in core/validators.py
from django.utils import timezone
from datetime import timedelta

def validate_youtube_url(value):
    youtube_regex = (
        r'^(https?\:\/\/)?(www\.youtube\.com|youtu\.?be)\/.+$'
    )
    if not re.match(youtube_regex, value):
        raise ValidationError(
            'Invalid YouTube URL',
            params={'value': value},
        )

class Cohort(models.Model):
    mentor = models.ForeignKey(Mentor, related_name='cohorts', on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    description = models.TextField()
    takeaways = models.TextField()
    introductory_video = models.URLField(validators=[validate_youtube_url], blank=True, null=True)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    link = models.URLField()
    start_date = models.DateTimeField(default=timezone.now() + timedelta(days=30))  # Default value set to 30 days from now
    end_date = models.DateTimeField(default=timezone.now() + timedelta(days=30))  # Default value set to 30 days from now

    def __str__(self):
        return self.name

    def __str__(self):
        return self.name

class CohortRegistration(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='cohort_registrations')
    cohort = models.ForeignKey(Cohort, on_delete=models.CASCADE, related_name='registrations')
    registered_at = models.DateTimeField(auto_now_add=True)
    payment_status = models.CharField(max_length=20, choices=[('Pending', 'Pending'), ('Completed', 'Completed')], default='Pending')

    def __str__(self):
        return f'{self.user.username} - {self.cohort.name}'

class Payment(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    from django.db import models
from core.models import CustomUser

class Payment(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    cohort_registration = models.OneToOneField(CohortRegistration, on_delete=models.CASCADE, related_name='payment', null=True, blank= True)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    payment_date = models.DateTimeField(auto_now_add=True)
    payment_status = models.CharField(max_length=20, choices=[('Pending', 'Pending'), ('Success', 'Success'), ('Failed', 'Failed')], default='Pending')
    razorpay_order_id = models.CharField(max_length=255, unique=True, blank=True, null=True)
    razorpay_payment_id = models.CharField(max_length=255, blank=True, null=True)
    razorpay_signature = models.CharField(max_length=255, blank=True, null=True)  # Signature from Razorpay
    verified = models.BooleanField(default=False)  # Verification status

    def __str__(self):
        return f'{self.user.username} - {self.cohort_registration.cohort.name} - {self.amount}'

================
File: cohorts/serializers.py
================
from rest_framework import serializers
from .models import Cohort, CohortRegistration, Payment

class CohortSerializer(serializers.ModelSerializer):
    class Meta:
        model = Cohort
        fields = '__all__'

class CohortRegistrationSerializer(serializers.ModelSerializer):
    cohort_name = serializers.CharField(source='cohort.name', read_only=True)
    mentor_name = serializers.CharField(source='cohort.mentor.username', read_only=True)

    class Meta:
        model = CohortRegistration
        fields = [
            'id', 
            'user', 
            'cohort', 
            'cohort_name', 
            'mentor_name', 
            'registered_at', 
            'payment_status'
        ]

class PaymentSerializer(serializers.ModelSerializer):
    cohort_name = serializers.CharField(source='cohort_registration.cohort.name', read_only=True)
    user_name = serializers.CharField(source='user.username', read_only=True)

    class Meta:
        model = Payment
        fields = [
            'id', 
            'user', 
            'user_name', 
            'cohort_registration', 
            'cohort_name', 
            'amount', 
            'payment_date', 
            'payment_status', 
            'razorpay_order_id', 
            'razorpay_payment_id', 
            'razorpay_signature', 
            'verified'  # Include the verification status field
        ]
        read_only_fields = ['payment_date', 'verified']  # Make certain fields read-only

================
File: cohorts/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: cohorts/urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import CohortViewSet, CohortRegistrationViewSet, PaymentViewSet, PaymentVerificationViewSet

router = DefaultRouter()
router.register(r'cohorts', CohortViewSet)
router.register(r'registrations', CohortRegistrationViewSet)
router.register(r'payments', PaymentViewSet)

urlpatterns = [
    path('', include(router.urls)),
    path('payment-verification/', PaymentVerificationViewSet.as_view({'post': 'create'})),
]

================
File: cohorts/views.py
================
from rest_framework import viewsets,status
from .models import Cohort, CohortRegistration, Payment
from .serializers import CohortSerializer, CohortRegistrationSerializer, PaymentSerializer
from rest_framework.response import Response
from rest_framework import status
from django.utils.crypto import hmac
from razorpay import Client
from django.conf import settings
import hashlib

# Initialize the Razorpay client with your API key and secret
razorpay_client = Client(auth=(settings.RAZORPAY_API_KEY, settings.RAZORPAY_API_SECRET))

class CohortViewSet(viewsets.ModelViewSet):
    queryset = Cohort.objects.all()
    serializer_class = CohortSerializer

class CohortRegistrationViewSet(viewsets.ModelViewSet):
    queryset = CohortRegistration.objects.all()
    serializer_class = CohortRegistrationSerializer

    def create(self, request, *args, **kwargs):
        cohort = Cohort.objects.get(id=request.data.get('cohort'))
        registration = CohortRegistration.objects.create(
            user=request.user,
            cohort=cohort,
            payment_status='Pending'
        )
        
        # Create a Razorpay order
        razorpay_order = razorpay_client.order.create({
            "amount": int(cohort.price * 100),  # Amount in paisa
            "currency": "INR",
            "receipt": str(registration.id),
            "payment_capture": 1
        })

        # Save the payment with the razorpay_order_id
        payment = Payment.objects.create(
            user=request.user,
            cohort_registration=registration,
            amount=cohort.price,
            razorpay_order_id=razorpay_order['id']
        )

        return Response({
            "registration_id": registration.id,
            "razorpay_order_id": razorpay_order['id'],
            "amount": cohort.price
        }, status=status.HTTP_201_CREATED)

class PaymentViewSet(viewsets.ModelViewSet):
    queryset = Payment.objects.all()
    serializer_class = PaymentSerializer

    def update(self, request, *args, **kwargs):
        payment = self.get_object()

        # Ensure that the Razorpay details including the signature are stored
        payment.razorpay_payment_id = request.data.get('razorpay_payment_id')
        payment.razorpay_signature = request.data.get('razorpay_signature')
        payment.payment_status = 'Success' if request.data.get('status') == 'Success' else 'Failed'
        payment.save()

        if payment.payment_status == 'Success':
            payment.cohort_registration.payment_status = 'Completed'
            payment.cohort_registration.razorpay_signature = 'razorpay_signature'
            payment.cohort_registration.save()

        return Response({"status": "Payment status updated and signature stored."})


class PaymentVerificationViewSet(viewsets.ViewSet):
    def create(self, request, *args, **kwargs):
        payment_id = request.data.get('razorpay_payment_id')
        order_id = request.data.get('razorpay_order_id')
        signature = request.data.get('razorpay_signature')

        payment = Payment.objects.get(razorpay_order_id=order_id)

        # Generate the signature using the payment details
        generated_signature = hmac.new(
            key=settings.RAZORPAY_API_SECRET.encode(),
            msg=(order_id + "|" + payment_id).encode(),
            digestmod=hashlib.sha256
        ).hexdigest()

        if generated_signature == signature:
            payment.verified = True
            payment.payment_status = 'Success'
            payment.cohort_registration.payment_status = 'Completed'
            payment.cohort_registration.save()
            payment.save()

            return Response({"status": "Payment verified and registration completed."}, status=status.HTTP_200_OK)
        else:
            payment.payment_status = 'Failed'
            payment.save()
            return Response({"status": "Payment verification failed."}, status=status.HTTP_400_BAD_REQUEST)

================
File: core/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-06-18 19:06

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('company_name', models.CharField(blank=True, max_length=255, null=True)),
                ('designation', models.CharField(blank=True, max_length=255, null=True)),
                ('gst_number', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('pin', models.CharField(blank=True, max_length=10, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('short_intro', models.TextField(blank=True, null=True)),
                ('age_of_startup', models.IntegerField(blank=True, null=True)),
                ('industry_of_startup', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('username', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='mentor_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('schedule', models.TextField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('introductory_video', models.URLField(blank=True, null=True)),
                ('expertise', models.TextField(blank=True, null=True)),
                ('toolkits_used', models.TextField(blank=True, null=True)),
                ('experience', models.TextField(blank=True, null=True)),
                ('content_links', models.TextField(blank=True, null=True)),
                ('reviews', models.TextField(blank=True, null=True)),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('time_blocks', models.TextField(blank=True, null=True)),
            ],
        ),
    ]

================
File: core/migrations/0002_alter_mentor_introductory_video.py
================
# Generated by Django 5.0 on 2024-06-18 19:13

import core.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='mentor',
            name='introductory_video',
            field=models.URLField(blank=True, null=True, validators=[core.models.validate_youtube_url]),
        ),
    ]

================
File: core/migrations/0003_remove_mentor_schedule_mentor_schedule.py
================
# Generated by Django 5.0 on 2024-06-18 19:32

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_alter_mentor_introductory_video'),
        ('scheduling', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='schedule',
        ),
        migrations.AddField(
            model_name='mentor',
            name='schedule',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='scheduling.availability'),
        ),
    ]

================
File: core/migrations/0004_remove_mentor_expertise_remove_mentor_toolkits_used_and_more.py
================
# Generated by Django 5.0 on 2024-06-18 19:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_remove_mentor_schedule_mentor_schedule'),
        ('industry', '0001_initial'),
        ('tools', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='expertise',
        ),
        migrations.RemoveField(
            model_name='mentor',
            name='toolkits_used',
        ),
        migrations.AddField(
            model_name='mentor',
            name='expertise',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='industry.expertise'),
        ),
        migrations.AddField(
            model_name='mentor',
            name='toolkits_used',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='tools.tool'),
        ),
    ]

================
File: core/migrations/0005_remove_mentor_content_links_contentlink.py
================
# Generated by Django 5.0 on 2024-06-18 19:55

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_remove_mentor_expertise_remove_mentor_toolkits_used_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='content_links',
        ),
        migrations.CreateModel(
            name='ContentLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_links', to='core.mentor')),
            ],
        ),
    ]

================
File: core/migrations/0006_remove_contentlink_mentor_mentor_content_links.py
================
# Generated by Django 5.0 on 2024-06-18 19:57

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_remove_mentor_content_links_contentlink'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='contentlink',
            name='mentor',
        ),
        migrations.AddField(
            model_name='mentor',
            name='content_links',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='core.contentlink'),
        ),
    ]

================
File: core/migrations/0007_remove_mentor_content_links_delete_contentlink_and_more.py
================
# Generated by Django 5.0 on 2024-06-18 20:05

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0006_remove_contentlink_mentor_mentor_content_links'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='content_links',
        ),
        migrations.DeleteModel(
            name='ContentLink',
        ),
        migrations.AddField(
            model_name='mentor',
            name='content_links',
            field=models.TextField(blank=True, null=True),
        ),
    ]

================
File: core/migrations/0008_remove_mentor_content_links_mentor_content_links.py
================
# Generated by Django 5.0 on 2024-06-18 20:13

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0002_alter_article_mentor'),
        ('core', '0007_remove_mentor_content_links_delete_contentlink_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='content_links',
        ),
        migrations.AddField(
            model_name='mentor',
            name='content_links',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='articles.article'),
        ),
    ]

================
File: core/migrations/0009_alter_mentor_content_links.py
================
# Generated by Django 5.0 on 2024-06-18 20:17

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0002_alter_article_mentor'),
        ('core', '0008_remove_mentor_content_links_mentor_content_links'),
    ]

    operations = [
        migrations.AlterField(
            model_name='mentor',
            name='content_links',
            field=models.ManyToManyField(blank=True, related_name='articles', to='articles.article'),
        ),
    ]

================
File: core/migrations/0010_remove_mentor_experience_mentor_experience.py
================
# Generated by Django 5.0 on 2024-06-18 21:01

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0009_alter_mentor_content_links'),
        ('workex', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='experience',
        ),
        migrations.AddField(
            model_name='mentor',
            name='experience',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='workex.workexperience'),
        ),
    ]

================
File: core/migrations/0011_timeblock_remove_mentor_time_blocks_and_more.py
================
# Generated by Django 5.0 on 2024-06-18 21:19

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0010_remove_mentor_experience_mentor_experience'),
    ]

    operations = [
        migrations.CreateModel(
            name='TimeBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.CharField(choices=[('15', '15 Minutes'), ('30', '30 Minutes'), ('60', '1 Hour')], max_length=2, unique=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='mentor',
            name='time_blocks',
        ),
        migrations.AddField(
            model_name='mentor',
            name='time_blocks',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='core.timeblock'),
        ),
    ]

================
File: core/migrations/0012_remove_mentor_reviews_review_mentor_reviews.py
================
# Generated by Django 5.0 on 2024-06-18 21:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0011_timeblock_remove_mentor_time_blocks_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='reviews',
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('rating', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_reviews', to='core.mentor')),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='mentor',
            name='reviews',
            field=models.ManyToManyField(blank=True, related_name='mentor_reviews', to='core.review'),
        ),
    ]

================
File: core/migrations/0013_workexperience_alter_mentor_experience.py
================
# Generated by Django 5.0 on 2024-06-18 21:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0012_remove_mentor_reviews_review_mentor_reviews'),
        ('industry', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('work_description', models.TextField()),
                ('date_started', models.DateField()),
                ('date_ended', models.DateField(blank=True, null=True)),
                ('currently_working', models.BooleanField(default=False)),
                ('industry_expertise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='epertise', to='industry.expertise')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='core.mentor')),
            ],
        ),
        migrations.AlterField(
            model_name='mentor',
            name='experience',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='core.workexperience'),
        ),
    ]

================
File: core/migrations/0014_alter_mentor_experience_delete_workexperience.py
================
# Generated by Django 5.0 on 2024-06-18 21:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0013_workexperience_alter_mentor_experience'),
        ('workex', '0002_workexperience_mentor'),
    ]

    operations = [
        migrations.AlterField(
            model_name='mentor',
            name='experience',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='workex.workexperience'),
        ),
        migrations.DeleteModel(
            name='WorkExperience',
        ),
    ]

================
File: core/migrations/0015_customuser_user_type.py
================
# Generated by Django 5.0 on 2024-06-19 19:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0014_alter_mentor_experience_delete_workexperience'),
    ]

    operations = [
        migrations.AddField(
            model_name='customuser',
            name='user_type',
            field=models.CharField(choices=[('mentor', 'Mentor'), ('mentee', 'Mentee')], default='mentee', max_length=10),
        ),
    ]

================
File: core/migrations/0016_delete_timeblock_alter_mentor_time_blocks.py
================
# Generated by Django 5.0 on 2024-06-22 17:41

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0015_customuser_user_type'),
    ]

    operations = [
        migrations.DeleteModel(
            name='TimeBlock',
        ),
        
    ]

================
File: core/migrations/0017_mentor_profile_picture.py
================
# Generated by Django 5.0 on 2024-06-26 12:28

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0016_delete_timeblock_alter_mentor_time_blocks'),
    ]

    operations = [
        migrations.AddField(
            model_name='mentor',
            name='profile_picture',
            field=models.ImageField(blank=True, null=True, upload_to='profile_pictures/'),
        ),
    ]

================
File: core/migrations/0018_customuser_otp.py
================
# Generated by Django 5.0 on 2024-07-23 18:28

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0017_mentor_profile_picture'),
    ]

    operations = [
        migrations.AddField(
            model_name='customuser',
            name='otp',
            field=models.CharField(blank=True, max_length=6, null=True),
        ),
    ]

================
File: core/migrations/0019_remove_customuser_otp_otp.py
================
# Generated by Django 5.0 on 2024-07-23 19:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0018_customuser_otp'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='customuser',
            name='otp',
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='otp', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: core/migrations/0020_remove_mentor_time_blocks_mentortimeblock.py
================
# Generated by Django 5.0 on 2024-08-30 12:12

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0019_remove_customuser_otp_otp'),
        
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='time_blocks',
        ),
        migrations.CreateModel(
            name='MentorTimeBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_time_blocks', to='core.mentor')),
                ('time_block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_time_blocks', to='time_blocks.timeblock')),
            ],
            options={
                'unique_together': {('mentor', 'time_block')},
            },
        ),
    ]

================
File: core/migrations/0021_customuser_profile_picture.py
================
# Generated by Django 5.1.1 on 2024-09-12 20:35

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0020_remove_mentor_time_blocks_mentortimeblock'),
    ]

    operations = [
        migrations.AddField(
            model_name='customuser',
            name='profile_picture',
            field=models.ImageField(blank=True, null=True, upload_to='profile_pictures/'),
        ),
    ]

================
File: core/migrations/0022_mentor_location.py
================
# Generated by Django 5.1.1 on 2024-09-24 19:22

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0021_customuser_profile_picture'),
    ]

    operations = [
        migrations.AddField(
            model_name='mentor',
            name='location',
            field=models.CharField(default='Noida', max_length=255),
        ),
    ]

================
File: core/migrations/0023_mentor_joined_date.py
================
# Generated by Django 5.1.1 on 2024-09-24 19:47

import datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0022_mentor_location'),
    ]

    operations = [
        migrations.AddField(
            model_name='mentor',
            name='joined_date',
            field=models.DateField(default=datetime.date.today),
        ),
    ]

================
File: core/migrations/0024_remove_mentor_schedule_mentorappointment_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:22

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0023_mentor_joined_date'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='schedule',
        ),
        migrations.CreateModel(
            name='MentorAppointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_appointments', to='core.mentor')),
            ],
        ),
        migrations.CreateModel(
            name='MentorTimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot_duration', models.PositiveIntegerField(choices=[(15, '15 minutes'), (30, '30 minutes'), (45, '45 minutes'), (60, '60 minutes')])),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_time_slots', to='core.mentor')),
            ],
            options={
                'unique_together': {('mentor', 'slot_duration')},
            },
        ),
        migrations.DeleteModel(
            name='MentorTimeBlock',
        ),
    ]

================
File: core/migrations/0025_alter_mentortimeslot_unique_together_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0024_remove_mentor_schedule_mentorappointment_and_more'),
        ('scheduling', '0010_alter_availability_mentor_alter_booking_mentor_and_more'),
        ('time_blocks', '0003_remove_timeblock_price'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='mentortimeslot',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='mentortimeslot',
            name='mentor',
        ),
        migrations.AddField(
            model_name='mentor',
            name='schedule',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='scheduling.availability'),
        ),
        migrations.CreateModel(
            name='MentorTimeBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_time_blocks', to='core.mentor')),
                ('time_block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_time_blocks', to='time_blocks.timeblock')),
            ],
            options={
                'unique_together': {('mentor', 'time_block')},
            },
        ),
        migrations.DeleteModel(
            name='MentorAppointment',
        ),
        migrations.DeleteModel(
            name='MentorTimeSlot',
        ),
    ]

================
File: core/migrations/0026_availability_mentor_availabilities_timeslot_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-30 19:55

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0025_alter_mentortimeslot_unique_together_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_availabilities', to='core.mentor')),
            ],
        ),
        migrations.AddField(
            model_name='mentor',
            name='availabilities',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='core.availability'),
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.PositiveIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_time_slots', to='core.mentor')),
            ],
        ),
        migrations.AddField(
            model_name='mentor',
            name='time_slots',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='core.timeslot'),
        ),
    ]

================
File: core/migrations/0027_alter_timeslot_unique_together_booking_payment.py
================
# Generated by Django 5.1.1 on 2024-09-30 21:53

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0026_availability_mentor_availabilities_timeslot_and_more'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='timeslot',
            unique_together={('mentor', 'duration')},
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('payment_status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('availability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.availability')),
                ('mentee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.mentor')),
                ('time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.timeslot')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razorpay_payment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('razorpay_order_id', models.CharField(blank=True, max_length=100, null=True)),
                ('razorpay_signature', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(default='Pending', max_length=50)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='core.booking')),
            ],
        ),
    ]

================
File: core/migrations/0028_booking_booking_status.py
================
# Generated by Django 5.1.1 on 2024-10-03 19:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0027_alter_timeslot_unique_together_booking_payment'),
    ]

    operations = [
        migrations.AddField(
            model_name='booking',
            name='booking_status',
            field=models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10),
        ),
    ]

================
File: core/migrations/0029_remove_mentor_schedule_booking_meeting_link.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:24

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0028_booking_booking_status'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='mentor',
            name='schedule',
        ),
        migrations.AddField(
            model_name='booking',
            name='meeting_link',
            field=models.URLField(blank=True, max_length=255, null=True),
        ),
    ]

================
File: core/migrations/0030_mentor_schedule.py
================
# Generated by Django 5.1.1 on 2024-10-03 23:16

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0029_remove_mentor_schedule_booking_meeting_link'),
        ('scheduling', '0015_availability_timeslot_delete_googlecredentials'),
    ]

    operations = [
        migrations.AddField(
            model_name='mentor',
            name='schedule',
            field=models.ManyToManyField(blank=True, related_name='mentors', to='scheduling.availability'),
        ),
    ]

================
File: core/migrations/0031_remove_booking_booking_status_and_more.py
================
# Generated by Django 5.1.1 on 2024-10-04 00:19

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0030_mentor_schedule'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='booking',
            name='booking_status',
        ),
        migrations.RemoveField(
            model_name='booking',
            name='meeting_link',
        ),
        migrations.RemoveField(
            model_name='mentor',
            name='schedule',
        ),
    ]

================
File: core/migrations/0032_booking_booking_status.py
================
# Generated by Django 5.1.1 on 2024-10-04 00:28

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0031_remove_booking_booking_status_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='booking',
            name='booking_status',
            field=models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10),
        ),
    ]

================
File: core/migrations/0033_booking_meeting_link.py
================
# Generated by Django 5.1.1 on 2024-10-04 01:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0032_booking_booking_status'),
    ]

    operations = [
        migrations.AddField(
            model_name='booking',
            name='meeting_link',
            field=models.URLField(blank=True, max_length=255, null=True),
        ),
    ]

================
File: core/admin.py
================
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.utils.html import format_html
from .models import CustomUser, Mentor, Review, MentorTimeBlock, Availability, TimeSlot, Booking, Payment
from tools.models import Tool
from industry.models import Expertise


# CustomUserAdmin to display profile picture from Mentor model
class CustomUserAdmin(UserAdmin):
    model = CustomUser
    list_display = ('username', 'email', 'is_staff', 'is_active', 'profile_picture_thumbnail')
    list_filter = ('username', 'email', 'is_staff', 'is_active',)
    
    fieldsets = (
        (None, {'fields': ('username', 'email', 'password', 'user_type')}),
        ('Personal info', {'fields': ('first_name', 'last_name', 'phone_number', 'company_name', 'designation', 'gst_number', 'address', 'country', 'pin', 'state', 'city', 'short_intro', 'age_of_startup', 'industry_of_startup', 'profile_picture')}),
        ('Permissions', {'fields': ('is_staff', 'is_active', 'is_superuser', 'groups', 'user_permissions')}),
    )
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'email', 'password1', 'password2', 'user_type', 'is_staff', 'is_active')}
        ),
    )
    search_fields = ('username', 'email',)
    ordering = ('username', 'email',)

    # Display profile picture thumbnail from Mentor model
    def profile_picture_thumbnail(self, obj):
        if obj.user_type == 'mentor' and hasattr(obj, 'mentor_profile') and obj.mentor_profile.profile_picture:
            return format_html('<img src="{}" style="width: 50px; height:50px;" />', obj.mentor_profile.profile_picture.url)
        return "No picture"
    
    profile_picture_thumbnail.short_description = 'Profile Picture'

# Inline for reviews in the Mentor model
class ReviewInline(admin.TabularInline):
    model = Review
    extra = 1

# Inline for time blocks in the Mentor model
class MentorTimeBlockInline(admin.TabularInline):
    model = MentorTimeBlock
    extra = 1

# Register Availability and TimeSlot models
@admin.register(Availability)
class AvailabilityAdmin(admin.ModelAdmin):
    list_display = ('mentor', 'date', 'start_time', 'end_time')
    list_filter = ('mentor', 'date')

@admin.register(TimeSlot)
class TimeSlotAdmin(admin.ModelAdmin):
    list_display = ('mentor', 'duration', 'price')
    list_filter = ('mentor', 'duration')

# Register Booking and Payment models
@admin.register(Booking)
class BookingAdmin(admin.ModelAdmin):
    list_display = ('mentor', 'mentee', 'availability', 'time_slot', 'start_time', 'end_time', 'payment_status')
    list_filter = ('mentor', 'mentee', 'payment_status')
    search_fields = ('mentor__username', 'mentee__username')

@admin.register(Payment)
class PaymentAdmin(admin.ModelAdmin):
    list_display = ('booking', 'amount', 'razorpay_order_id', 'razorpay_payment_id', 'status')
    list_filter = ('status',)
    search_fields = ('razorpay_order_id', 'razorpay_payment_id')

# MentorAdmin for displaying mentor details including reviews and time blocks
class MentorAdmin(admin.ModelAdmin):
    list_display = ('name', 'username')
    filter_horizontal = ('expertise', 'toolkits_used')
    inlines = [ReviewInline, MentorTimeBlockInline]

admin.site.register(CustomUser, CustomUserAdmin)
admin.site.register(Mentor, MentorAdmin)
admin.site.register(Tool)
admin.site.register(Expertise)
admin.site.register(Review)

================
File: core/apps.py
================
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'

================
File: core/models.py
================
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin, Group, Permission
from django.core.exceptions import ValidationError
import re
from tools.models import Tool
from industry.models import Expertise
from articles.models import Article
from workex.models import WorkExperience
from django.conf import settings
from time_blocks.models import TimeBlock
from datetime import date, timedelta, datetime

class Review(models.Model):
    mentor = models.ForeignKey('Mentor', related_name='mentor_reviews', on_delete=models.CASCADE)
    reviewer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
    content = models.TextField()
    rating = models.PositiveIntegerField(default=1)
    created_at = models.DateTimeField(auto_now_add=True)


    def __str__(self):
        return f'Review for {self.mentor.name} by {self.reviewer.username if self.reviewer else "Admin"}'

def validate_youtube_url(value):
    youtube_regex = (
        r'^(https?\:\/\/)?(www\.youtube\.com|youtu\.?be)\/.+$'
    )
    if not re.match(youtube_regex, value):
        raise ValidationError(
            'Invalid YouTube URL',
            params={'value': value},
        )

class CustomUserManager(BaseUserManager):
    def create_user(self, username, email, password=None, user_type='mentee', **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        email = self.normalize_email(email)
        user = self.model(username=username, email=email, user_type=user_type, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')

        return self.create_user(username, email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    USER_TYPE_CHOICES = (
        ('mentor', 'Mentor'),
        ('mentee', 'Mentee'),
    )

    username = models.CharField(max_length=150, unique=True)
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30, blank=True, null=True)
    last_name = models.CharField(max_length=30, blank=True, null=True)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    phone_number = models.CharField(max_length=15, blank=True, null=True)
    company_name = models.CharField(max_length=255, blank=True, null=True)
    designation = models.CharField(max_length=255, blank=True, null=True)
    gst_number = models.CharField(max_length=15, blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    country = models.CharField(max_length=100, blank=True, null=True)
    pin = models.CharField(max_length=10, blank=True, null=True)
    state = models.CharField(max_length=100, blank=True, null=True)
    city = models.CharField(max_length=100, blank=True, null=True)
    short_intro = models.TextField(blank=True, null=True)
    age_of_startup = models.IntegerField(blank=True, null=True)
    industry_of_startup = models.CharField(max_length=100, blank=True, null=True)
    user_type = models.CharField(max_length=10, choices=USER_TYPE_CHOICES, default='mentee')
    profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)
    groups = models.ManyToManyField(Group, related_name='customuser_set', blank=True)
    user_permissions = models.ManyToManyField(Permission, related_name='customuser_set', blank=True)

    objects = CustomUserManager()

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['email']

    def __str__(self):
        return self.username

    def convert_to_mentor(self):
        if self.user_type == 'mentee':
            self.user_type = 'mentor'
            self.save()
            Mentor.objects.create(username=self, name=self.username)

class Mentor(models.Model):
    username = models.OneToOneField(CustomUser, on_delete=models.CASCADE, primary_key=True, related_name='mentor_profile')
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    bio = models.TextField(blank=True, null=True)
    introductory_video = models.URLField(blank=True, null=True, validators=[validate_youtube_url])
    expertise = models.ManyToManyField(Expertise, related_name='mentors', blank=True)
    toolkits_used = models.ManyToManyField(Tool, related_name='mentors', blank=True)
    experience = models.ManyToManyField(WorkExperience, related_name='mentors', blank=True)
    content_links = models.ManyToManyField(Article, related_name='articles', blank=True)
    reviews = models.ManyToManyField(Review, related_name='mentor_reviews', blank=True)
    linkedin = models.URLField(blank=True, null=True)
    profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)
    location=models.CharField(max_length=255,default='Noida')
    joined_date = models.DateField(default=date.today)  # Automatically set to the date the mentor is created
    availabilities = models.ManyToManyField('Availability', related_name='mentors', blank=True)
    time_slots = models.ManyToManyField('TimeSlot', related_name='mentors', blank=True)
    @property
    def next_availability(self):
        # Get the next availability from the related schedule
        upcoming_availability = self.schedule.filter(date__gte=date.today()).order_by('date', 'start_time').first()
        if upcoming_availability:
            return f'{upcoming_availability.date} at {upcoming_availability.start_time}'
        return "No upcoming availability"

    def __str__(self):
        return self.name
class Availability(models.Model):
    mentor = models.ForeignKey(Mentor, on_delete=models.CASCADE, related_name='mentor_availabilities')
    date = models.DateField()
    start_time = models.TimeField()
    end_time = models.TimeField()

    def get_available_slots(self, duration):
        slots = []
        start_time = datetime.combine(self.date, self.start_time)
        end_time = datetime.combine(self.date, self.end_time)

        while start_time + timedelta(minutes=duration) <= end_time:
            slots.append({
                'start': start_time.time(),
                'end': (start_time + timedelta(minutes=duration)).time(),
            })
            start_time += timedelta(minutes=duration)
        return slots

    def __str__(self):
        return f"{self.mentor.name} availability on {self.date} from {self.start_time} to {self.end_time}"



class TimeSlot(models.Model):
    mentor = models.ForeignKey(Mentor, on_delete=models.CASCADE, related_name='mentor_time_slots')
    duration = models.PositiveIntegerField()  # in minutes
    price = models.DecimalField(max_digits=10, decimal_places=2)
    
    class Meta:
        unique_together = ('mentor', 'duration')

    def __str__(self):
        return f"{self.mentor.name} - {self.duration} mins at {self.price} INR"

class MentorTimeBlock(models.Model):
    mentor = models.ForeignKey(Mentor, on_delete=models.CASCADE, related_name='mentor_time_blocks')
    time_block = models.ForeignKey(TimeBlock, on_delete=models.CASCADE, related_name='mentor_time_blocks')
    price = models.DecimalField(max_digits=10, decimal_places=2)

    class Meta:
        unique_together = ('mentor', 'time_block')

    def __str__(self):
        return f'{self.mentor.name} - {self.time_block.duration} minutes - {self.price} INR'

class OTP(models.Model):
    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE, related_name='otp')
    otp_code = models.CharField(max_length=6)
    created_at = models.DateTimeField(auto_now_add=True)
    is_verified = models.BooleanField(default=False)

    def __str__(self):
        return f'OTP for {self.user.username}'
    
from django.db import models

class Booking(models.Model):
    BOOKING_STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]

    mentor = models.ForeignKey(Mentor, on_delete=models.CASCADE)
    mentee = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    availability = models.ForeignKey(Availability, on_delete=models.CASCADE)
    time_slot = models.ForeignKey(TimeSlot, on_delete=models.CASCADE)
    start_time = models.DateTimeField()
    end_time = models.DateTimeField()
    payment_status = models.BooleanField(default=False)
    booking_status = models.CharField(
        max_length=10,
        choices=BOOKING_STATUS_CHOICES,
        default='pending'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    meeting_link = models.URLField(max_length=255, null=True, blank=True)
    def __str__(self):
        return f'Booking {self.id} for {self.mentee.username} with {self.mentor.name}'



class Payment(models.Model):
    booking = models.OneToOneField('Booking', on_delete=models.CASCADE, related_name='payment')
    razorpay_payment_id = models.CharField(max_length=100, null=True, blank=True)
    razorpay_order_id = models.CharField(max_length=100, null=True, blank=True)
    razorpay_signature = models.CharField(max_length=255, null=True, blank=True)
    status = models.CharField(max_length=50, default='Pending')
    amount = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f'Payment for Booking {self.booking.id} - {self.status}'

================
File: core/pipeline.py
================
def set_user_type(backend, user, response, *args, **kwargs):
    if not user.user_type:
        user.user_type = 'mentee'
        user.save()

================
File: core/razorpay_service.py
================
import hmac
import hashlib
import logging
from django.conf import settings

logger = logging.getLogger(__name__)

def verify_payment(razorpay_payment_id, razorpay_order_id, razorpay_signature):
    """
    Verifies the Razorpay payment signature manually using HMAC with SHA-256.
    
    :param razorpay_payment_id: The Razorpay Payment ID
    :param razorpay_order_id: The Razorpay Order ID
    :param razorpay_signature: The Razorpay Signature from the response
    :return: True if verification is successful, False otherwise
    """
    try:
        # Construct the expected signature message
        message = f"{razorpay_order_id}|{razorpay_payment_id}"

        # Create the HMAC SHA-256 signature using the Razorpay secret key
        secret = settings.RAZORPAY_API_SECRET.encode('utf-8')
        generated_signature = hmac.new(secret, message.encode('utf-8'), hashlib.sha256).hexdigest()

        logger.info("Generated HMAC signature: %s", generated_signature)

        # Compare the generated signature with the received signature
        if hmac.compare_digest(generated_signature, razorpay_signature):
            logger.info("HMAC Signature Verification successful")
            return True
        else:
            logger.error("HMAC Signature Verification failed")
            return False

    except Exception as e:
        # Log any errors during the process
        logger.error("Error during HMAC verification: %s", str(e))
        return False

================
File: core/serializers.py
================
from rest_framework import serializers
from django.contrib.auth import get_user_model
from rest_framework.authtoken.models import Token
from .models import Mentor, Expertise, Tool, Review, MentorTimeBlock
from workex.models import WorkExperience
from core.models import Availability,TimeSlot,Booking,CustomUser

from time_blocks.models import TimeBlock
from time_blocks.serializers import TimeBlockSerializer
from django.shortcuts import get_object_or_404 
User = get_user_model()

class AvailabilitySerializer(serializers.ModelSerializer):
    slots = serializers.SerializerMethodField()

    class Meta:
        model = Availability
        fields = ['id','mentor', 'date', 'start_time', 'end_time', 'slots']

    def get_slots(self, obj):
        # Fetch the mentor from the availability object
        mentor = obj.mentor
        time_slots = mentor.mentor_time_slots.all()  # Fetch the mentor's active time slots

        slot_data = {}

        # Iterate over the mentor's time slots to calculate available slots
        for time_slot in time_slots:
            duration = time_slot.duration
            slots_for_duration = obj.get_available_slots(duration)
            slot_data[f'slots_{duration}_mins'] = slots_for_duration

        return slot_data

from django.shortcuts import get_object_or_404

class MenteeSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser  # Assuming CustomUser is your user model
        fields = ['id', 'first_name', 'last_name', 'email', 'phone_number', 'profile_picture', 'short_intro']

class BookingSerializer(serializers.ModelSerializer):
    mentor = serializers.StringRelatedField(read_only=True)
    mentee = MenteeSerializer(read_only=True)  # Assuming you have a MenteeSerializer
    availability = serializers.StringRelatedField(read_only=True)
    time_slot = serializers.StringRelatedField(read_only=True)
    booking_status = serializers.CharField(read_only=True)  # Read-only for mentees
    meeting_link = serializers.CharField(read_only=True)  
    class Meta:
        model = Booking
        fields = ['id', 'mentee', 'mentor', 'availability', 'time_slot', 'start_time', 'end_time', 'payment_status', 'booking_status', 'created_at','meeting_link']
        read_only_fields = ['mentee', 'mentor', 'payment_status', 'created_at', 'booking_status']

    def create(self, validated_data):
        # Automatically assign the logged-in user as the mentee
        mentee = self.context['request'].user

        # Extract availability and time_slot IDs from the incoming request
        availability_id = self.context['request'].data.get('availability_id')
        time_slot_id = self.context['request'].data.get('time_slot_id')

        # Fetch the actual Availability and TimeSlot objects based on the IDs
        availability = get_object_or_404(Availability, id=availability_id)
        time_slot = get_object_or_404(TimeSlot, id=time_slot_id)

        # Add mentor, availability, and time_slot to the validated data
        validated_data['mentee'] = mentee
        validated_data['mentor'] = availability.mentor
        validated_data['availability'] = availability
        validated_data['time_slot'] = time_slot

        # Check if this time slot is available for booking
        overlapping_bookings = Booking.objects.filter(
            mentor=availability.mentor,
            availability=availability,
            start_time__lt=validated_data['end_time'],
            end_time__gt=validated_data['start_time']
        )

        if overlapping_bookings.exists():
            raise serializers.ValidationError("The selected time slot is already booked.")

        # Create the booking
        booking = Booking.objects.create(**validated_data)
        return booking



class TimeSlotSerializer(serializers.ModelSerializer):
    class Meta:
        model = TimeSlot
        fields = ['id', 'duration', 'price']



class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'password', 'user_type']
        extra_kwargs = {'password': {'write_only': True}}

    def create(self, validated_data):
        user_type = validated_data.pop('user_type', 'mentee')
        user = User.objects.create_user(**validated_data, user_type=user_type)
        Token.objects.create(user=user)
        return user

class ConvertToMentorSerializer(serializers.Serializer):
    username = serializers.CharField()

class LoginSerializer(serializers.Serializer):
    username = serializers.CharField()
    password = serializers.CharField()

class ExpertiseSerializer(serializers.ModelSerializer):
    class Meta:
        model = Expertise
        fields = ['name','expertise_description']

class ToolSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tool
        fields = ['name']

class ReviewSerializer(serializers.ModelSerializer):
    reviewer = serializers.ReadOnlyField(source='reviewer.username')
    reviewer_profile_picture = serializers.ImageField(source='reviewer.profile_picture', read_only=True)

    class Meta:
        model = Review
        fields = ['mentor','reviewer','reviewer_profile_picture', 'content', 'rating', 'created_at']

class WorkExperienceSerializer(serializers.ModelSerializer):
    industry_expertise = ExpertiseSerializer(many=True)
    
    class Meta:
        model = WorkExperience
        fields = ['id', 'company_name', 'work_description', 'date_started', 'date_ended', 'currently_working', 'industry_expertise']
        extra_kwargs = {
            'date_started': {'format': '%Y-%m-%d'},
            'date_ended': {'format': '%Y-%m-%d'}
        }

    def validate(self, data):
        if data.get('currently_working') and data.get('date_ended'):
            raise serializers.ValidationError("Currently working experience should not have an end date.")
        return data

class MentorTimeBlockSerializer(serializers.ModelSerializer):
    time_block = TimeBlockSerializer()

    class Meta:
        model = MentorTimeBlock
        fields = ['time_block', 'price']

class MentorSerializer(serializers.ModelSerializer):
    username = serializers.ReadOnlyField(source='username.username')
    mentor_time_blocks = MentorTimeBlockSerializer(many=True)
    expertise = ExpertiseSerializer(many=True)
    toolkits_used = ToolSerializer(many=True)
    reviews = ReviewSerializer(many=True)
    work_experiences = WorkExperienceSerializer(many=True)
    all_expertise = ExpertiseSerializer(many=True, read_only=True, source='expertise_model.all')
    all_tools = ToolSerializer(many=True, read_only=True, source='tool_model.all')
    availabilities = AvailabilitySerializer(many=True, source='mentor_availabilities')
    time_slots = TimeSlotSerializer(many=True, source='mentor_time_slots')
    id = serializers.ReadOnlyField(source='username.id')
    joined_date = serializers.DateField(read_only=True)
    next_availability = serializers.ReadOnlyField()
    class Meta:
        model = Mentor
        fields = [
            'id','username', 'name', 'description', 'bio', 'introductory_video',
            'expertise', 'toolkits_used', 'reviews', 'linkedin','location',
            'mentor_time_blocks', 'work_experiences', 'availabilities','time_slots',
            'all_expertise', 'all_tools', 'profile_picture','joined_date', 'next_availability'
        ]


    def update(self, instance, validated_data):
        instance.name = validated_data.get('name', instance.name)
        instance.description = validated_data.get('description', instance.description)
        instance.bio = validated_data.get('bio', instance.bio)
        instance.introductory_video = validated_data.get('introductory_video', instance.introductory_video)
        instance.linkedin = validated_data.get('linkedin', instance.linkedin)
        instance.profile_picture = validated_data.get('profile_picture', instance.profile_picture)

        if 'expertise' in validated_data:
            expertise_data = validated_data.pop('expertise')
            instance.expertise.set([Expertise.objects.get(name=exp['name']) for exp in expertise_data])

        if 'toolkits_used' in validated_data:
            toolkits_data = validated_data.pop('toolkits_used')
            instance.toolkits_used.set([Tool.objects.get(name=tool['name']) for tool in toolkits_data])

        if 'work_experiences' in validated_data:
            work_experiences_data = validated_data.pop('work_experiences')
            existing_experience_ids = [exp['id'] for exp in work_experiences_data if 'id' in exp]
            WorkExperience.objects.filter(mentor=instance).exclude(id__in=existing_experience_ids).delete()
            for exp_data in work_experiences_data:
                exp_id = exp_data.get('id', None)
                if exp_id:
                    work_experience = WorkExperience.objects.get(id=exp_id, mentor=instance)
                    work_experience.company_name = exp_data.get('company_name', work_experience.company_name)
                    work_experience.work_description = exp_data.get('work_description', work_experience.work_description)
                    work_experience.date_started = exp_data.get('date_started', work_experience.date_started)
                    work_experience.date_ended = exp_data.get('date_ended', work_experience.date_ended)
                    work_experience.currently_working = exp_data.get('currently_working', work_experience.currently_working)
                    work_experience.industry_expertise.set([Expertise.objects.get(name=exp['name']) for exp in exp_data.get('industry_expertise', [])])
                    work_experience.save()
                else:
                    new_exp = WorkExperience.objects.create(
                        mentor=instance,
                        company_name=exp_data['company_name'],
                        work_description=exp_data['work_description'],
                        date_started=exp_data['date_started'],
                        date_ended=exp_data.get('date_ended', None),
                        currently_working=exp_data.get('currently_working', False),
                    )
                    new_exp.industry_expertise.set([Expertise.objects.get(name=exp['name']) for exp in exp_data.get('industry_expertise', [])])
                    new_exp.save()

        if 'mentor_time_blocks' in validated_data:
            mentor_time_blocks_data = validated_data.pop('mentor_time_blocks')
            instance.mentor_time_blocks.all().delete()  # Clear existing time blocks
            for mtb_data in mentor_time_blocks_data:
                time_block_id = mtb_data.get('time_block')
                time_block = get_object_or_404(TimeBlock, id=time_block_id)
                MentorTimeBlock.objects.create(
                    mentor=instance,
                    time_block=time_block,  # This now correctly resolves the TimeBlock instance
                    price=mtb_data['price']
                )

        instance.save()
        return instance
    


from rest_framework import serializers
from .models import Booking

class MenteeBookingSerializer(serializers.ModelSerializer):
    booking_date = serializers.SerializerMethodField()
    booking_start_time = serializers.SerializerMethodField()
    booking_end_time = serializers.SerializerMethodField()
    mentor_name = serializers.SerializerMethodField()  # Field for mentor's name
    mentor_profile_picture = serializers.SerializerMethodField()  # Field for mentor's profile picture

    class Meta:
        model = Booking
        fields = [
            'id', 
            'mentor_name', 
            'mentor_profile_picture',  # Add mentor's profile picture
            'availability', 
            'time_slot', 
            'booking_date', 
            'booking_start_time', 
            'booking_end_time', 
            'payment_status'
        ]

    def get_booking_date(self, obj):
        # Extract and return the date part of start_time
        return obj.start_time.date()

    def get_booking_start_time(self, obj):
        # Extract and return only the time part of start_time
        return obj.start_time.time()
    
    def get_booking_end_time(self, obj):
        # Extract and return only the time part of end_time
        return obj.end_time.time()

    def get_mentor_name(self, obj):
        # Return the mentor's name instead of their ID
        return obj.mentor.name if obj.mentor else None

    def get_mentor_profile_picture(self, obj):
        # Return the mentor's profile picture URL if it exists
        return obj.mentor.profile_picture.url if obj.mentor and obj.mentor.profile_picture else None

class MenteeProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        fields = [
            'id','first_name', 'last_name', 'username', 'email', 'phone_number', 'address',
            'city', 'state', 'pin', 'country', 'profile_picture', 'short_intro','company_name', 'designation', 'gst_number', 'age_of_startup', 'industry_of_startup'
        ]
        extra_kwargs = {
            'username': {'read_only': True},  # Read-only field
            'email': {'read_only': True},  # Read-only field
            'profile_picture': {'required': False, 'allow_null': True},  # Allow null for profile picture
        }

    def update(self, instance, validated_data):
        profile_picture = validated_data.pop('profile_picture', None)

        for attr, value in validated_data.items():
            setattr(instance, attr, value)

        # Handle profile picture upload
        if profile_picture:
            instance.profile_picture = profile_picture

        instance.save()
        return instance
class MentorBookingSerializer(serializers.ModelSerializer):
    mentee_id = serializers.CharField(source='mentee.id')
    mentee_first_name = serializers.CharField(source='mentee.first_name')
    mentee_last_name = serializers.CharField(source='mentee.last_name')
    mentee_profile_picture = serializers.SerializerMethodField()
    booking_date = serializers.SerializerMethodField()
    booking_start_time = serializers.SerializerMethodField()
    booking_end_time = serializers.SerializerMethodField()

    class Meta:
        model = Booking
        fields = [
            'id',
            'mentee_id', 
            'mentee_first_name', 
            'mentee_last_name', 
            'mentee_profile_picture', 
            'booking_date', 
            'booking_start_time', 
            'booking_end_time', 
            'payment_status'
        ]

    def get_mentee_profile_picture(self, obj):
        # Return the mentee's profile picture URL if available
        if obj.mentee.profile_picture:
            return self.context['request'].build_absolute_uri(obj.mentee.profile_picture.url)
        return None

    def get_booking_date(self, obj):
        return obj.start_time.date()

    def get_booking_start_time(self, obj):
        return obj.start_time.time()

    def get_booking_end_time(self, obj):
        return obj.end_time.time()

================
File: core/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: core/urls.py
================
from django.urls import path, include
from .views import CheckUsernameView,CheckEmailView,VerifyOTPView,CreateBookingView,VerifyPaymentView, RegisterView, LoginView, MentorList, MentorDetail, MentorProfileView, ConvertToMentorView, LoggedInMentorDetailView, TimeBlockList, UserProfileView, MentorTimeBlockListCreateView, MentorAvailableSlotsView,MenteeBookingView,MenteeProfileView,MentorBookingListView,MenteeProfileDetailView,BookingStatusUpdateView

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('login/', LoginView.as_view(), name='login'),
    path('mentors/', MentorList.as_view(), name='mentor-list'),
    path('mentors/<int:pk>/', MentorDetail.as_view(), name='mentor-detail'),
    path('mentors/me/', LoggedInMentorDetailView.as_view(), name='logged-in-mentor-detail'),
    path('mentors/<str:username>/', MentorProfileView.as_view(), name='mentor-profile'),
    path('time-blocks/', TimeBlockList.as_view(), name='time-block-list'),
    path('users/<int:pk>/', UserProfileView.as_view(), name='user-profile'),
    path('convert-to-mentor/', ConvertToMentorView.as_view(), name='convert-to-mentor'),
    path('verify-otp/', VerifyOTPView.as_view(), name='verify-otp'),
    path('check-username/', CheckUsernameView.as_view(), name='check-username'),
    path('check-email/', CheckEmailView.as_view(), name='check-email'),
    path('mentors/<int:mentor_id>/available-slots/', MentorAvailableSlotsView.as_view(), name='mentor-available-slots'),
    path('mentorbooking/create-booking/', CreateBookingView.as_view(), name='create-booking'),
    path('mentorbooking/verify-payment/', VerifyPaymentView.as_view(), name='verify-payment'),
    path('mentee-bookings/', MenteeBookingView.as_view(), name='mentee-bookings'),
    path('mentee-profile/', MenteeProfileView.as_view(), name='mentee-profile'),
    path('mentor-time-blocks/', MentorTimeBlockListCreateView.as_view(), name='mentor-time-block-list-create'),
    path('user-profile/', MenteeProfileView.as_view(), name='user-profile'),
    path('mentee-profile/<int:pk>/', MenteeProfileDetailView.as_view(), name='mentee-profile-detail'),
    path('mentor/bookings/', MentorBookingListView.as_view(), name='mentor-booking-list'),
    path('booking-status/<int:booking_id>/', BookingStatusUpdateView.as_view(), name='booking-status-update'),
]

================
File: core/views.py
================
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.generics import ListAPIView
from rest_framework.authtoken.models import Token
from rest_framework.permissions import AllowAny, IsAuthenticated
from django.contrib.auth import get_user_model, authenticate
from django.core.mail import send_mail
from django.utils.crypto import get_random_string
from rest_framework.decorators import api_view, permission_classes
import hmac
import hashlib
import threading
from .razorpay_service import verify_payment
from .serializers import UserSerializer, LoginSerializer, MentorSerializer, MentorTimeBlockSerializer,BookingSerializer,MenteeBookingSerializer,MenteeProfileSerializer,MentorBookingSerializer
from .models import Mentor, TimeBlock, CustomUser, OTP, MentorTimeBlock,Availability,TimeSlot,Booking,Payment
from time_blocks.models import TimeBlock 
from time_blocks.serializers import TimeBlockSerializer
import logging
from django.conf import settings
import razorpay
from django.shortcuts import get_object_or_404 
from datetime import date, timedelta, datetime
import time
from django.utils import timezone
from django.core.exceptions import PermissionDenied
from scheduling.utils import create_google_meet_event



User = get_user_model()
logger = logging.getLogger(__name__)

client = razorpay.Client(auth=(settings.RAZORPAY_API_KEY, settings.RAZORPAY_API_SECRET))

def create_razorpay_order(amount):
    # Create an order in Razorpay
    order = client.order.create({
        "amount": amount,
        "currency": "INR",
        "payment_capture": "1"
    })
    return order

class CheckEmailView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, *args, **kwargs):
        email = request.query_params.get('email', None)
        if email and CustomUser.objects.filter(email=email).exists():
            return Response({'exists': True}, status=200)
        return Response({'exists': False}, status=200)
    
class CheckUsernameView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, *args, **kwargs):
        username = request.query_params.get('username', None)
        if username and CustomUser.objects.filter(username=username).exists():
            return Response({'exists': True}, status=200)
        return Response({'exists': False}, status=200)

class UserProfileView(generics.RetrieveAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = UserSerializer
    permission_classes = [AllowAny]

class RegisterView(generics.CreateAPIView):
    serializer_class = UserSerializer
    permission_classes = [AllowAny]

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()

        # Generate OTP
        otp_code = get_random_string(length=6, allowed_chars='0123456789')
        OTP.objects.create(user=user, otp_code=otp_code)

        # Send OTP via email
        send_mail(
            'Your OTP Code',
            f'Your OTP code is {otp_code}',
            'menttalk.tech@gmail.com',
            [user.email],
            fail_silently=False,
        )

        return Response({'detail': 'OTP sent to your email. Please verify your account.'}, status=status.HTTP_201_CREATED)

class VerifyOTPView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        username = request.data.get('username')
        otp_code = request.data.get('otp_code')
        
        try:
            user = CustomUser.objects.get(username=username)
            otp = OTP.objects.get(user=user, otp_code=otp_code)
        except CustomUser.DoesNotExist:
            return Response({'error': 'Invalid username'}, status=status.HTTP_400_BAD_REQUEST)
        except OTP.DoesNotExist:
            return Response({'error': 'Invalid OTP'}, status=status.HTTP_400_BAD_REQUEST)

        # Verify OTP
        if otp.is_verified:
            return Response({'error': 'OTP already verified'}, status=status.HTTP_400_BAD_REQUEST)

        otp.is_verified = True
        otp.save()
        user.is_active = True
        user.save()

        return Response({'detail': 'Account verified successfully'}, status=status.HTTP_200_OK)

class LoginView(APIView):
    serializer_class = LoginSerializer
    permission_classes = [AllowAny]

    def post(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = authenticate(username=serializer.validated_data['username'], password=serializer.validated_data['password'])
        if user:
            token, created = Token.objects.get_or_create(user=user)
            return Response({'token': token.key, 'user_id': user.id, 'user_type': user.user_type})
        return Response({'error': 'Invalid Credentials'}, status=status.HTTP_401_UNAUTHORIZED)

class MentorList(generics.ListCreateAPIView):
    queryset = Mentor.objects.all()
    serializer_class = MentorSerializer
    permission_classes = [AllowAny]

class MentorDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Mentor.objects.all()
    serializer_class = MentorSerializer
    permission_classes = [AllowAny]

class MentorProfileView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Mentor.objects.all()
    serializer_class = MentorSerializer

    def get_object(self):
        return self.request.user.mentor_profile

    def update(self, request, *args, **kwargs):
        mentor = self.get_object()
        data = request.data

        # Update availability and time slots
        availabilities = data.get('availabilities')
        time_slots = data.get('time_slots')

        if availabilities:
            mentor.availabilities.clear()
            for availability_data in availabilities:
                Availability.objects.create(
                    mentor=mentor,
                    date=availability_data['date'],
                    start_time=availability_data['start_time'],
                    end_time=availability_data['end_time']
                )

        if time_slots:
            mentor.time_slots.clear()
            for time_slot_data in time_slots:
                TimeSlot.objects.create(
                    mentor=mentor,
                    duration=time_slot_data['duration'],
                    price=time_slot_data['price']
                )

        return super().update(request, *args, **kwargs)

class MentorAvailableSlotsView(APIView):
    """
    API view to calculate and return available slots based on mentor availability and time slots.
    """
    permission_classes = [AllowAny]

    def get(self, request, mentor_id):
        # Fetch the mentor and ensure it exists
        mentor = get_object_or_404(Mentor, username_id=mentor_id)
        
        # Get upcoming availabilities for the mentor (only future dates)
        availabilities = mentor.mentor_availabilities.filter(date__gte=date.today()).order_by('date', 'start_time')

        # Get all time slots associated with the mentor
        time_slots = mentor.mentor_time_slots.all()

        available_slots = []

        for availability in availabilities:
            availability_slots = []
            for time_slot in time_slots:
                # Generate available slots for each time slot's duration
                slots = availability.get_available_slots(time_slot.duration)
                if slots:
                    availability_slots.append({
                        'time_slot_id': time_slot.id,
                        'time_slot_duration': time_slot.duration,
                        'price': time_slot.price,
                        'slots': slots
                    })

            if availability_slots:
                available_slots.append({
                    'availability_id': availability.id,
                    'date': availability.date,
                    'start_time': availability.start_time,
                    'end_time': availability.end_time,
                    'slots': availability_slots
                })

        if not available_slots:
            return Response({'message': 'No available slots found'}, status=status.HTTP_404_NOT_FOUND)

        return Response(available_slots, status=status.HTTP_200_OK)


    def generate_slots(self, availability, duration):
        """
        Generates available slots for a given availability and slot duration.
        """
        slots = []
        start_time = datetime.combine(availability.date, availability.start_time)
        end_time = datetime.combine(availability.date, availability.end_time)

        logger.info(f"Generating slots from {start_time} to {end_time} with duration {duration} minutes")

        # Ensure the end time is after the start time
        if end_time <= start_time:
            logger.error("End time is before start time. No slots can be generated.")
            return []

        while start_time + timedelta(minutes=duration) <= end_time:
            end_slot_time = start_time + timedelta(minutes=duration)
            slots.append({
                'start': start_time.time(),
                'end': end_slot_time.time()
            })
            start_time = end_slot_time

        logger.info(f"Generated {len(slots)} slots")
        return slots

def delete_unpaid_booking(booking_id):
    """
    Background thread to delete the booking if payment is not completed after 60 seconds.
    """
    def check_and_delete_unpaid_booking():
        time.sleep(60)  # Wait for 60 seconds
        try:
            booking = Booking.objects.get(id=booking_id)
            if not booking.payment_status:
                logger.info(f"Deleting unpaid booking {booking_id} after 60 seconds.")
                booking.delete()
            else:
                logger.info(f"Booking {booking_id} was paid, not deleting.")
        except Booking.DoesNotExist:
            logger.warning(f"Booking {booking_id} already deleted or does not exist.")

    # Start the background thread
    threading.Thread(target=check_and_delete_unpaid_booking).start()

class CreateBookingView(generics.CreateAPIView):
    queryset = Booking.objects.all()
    serializer_class = BookingSerializer
    permission_classes = [IsAuthenticated]

    def create(self, request, *args, **kwargs):
        logger.info("CreateBookingView - Request Data: %s", request.data)

        # Extract required fields from request data
        mentor_id = request.data.get('mentor_id')
        availability_id = request.data.get('availability_id')
        time_slot_id = request.data.get('time_slot_id')

        # Convert naive time to timezone-aware datetime
        start_time = timezone.make_aware(
            datetime.strptime(request.data.get('start_time'), '%Y-%m-%d %H:%M:%S'),
            timezone.get_current_timezone()
        )

        end_time = timezone.make_aware(
            datetime.strptime(request.data.get('end_time'), '%Y-%m-%d %H:%M:%S'),
            timezone.get_current_timezone()
        )

        # Validate that required fields are provided
        if not all([mentor_id, availability_id, time_slot_id, start_time, end_time]):
            logger.error("Missing required fields in request data.")
            return Response({"error": "Mentor ID, Availability ID, Time Slot ID, Start Time, and End Time are required."}, status=status.HTTP_400_BAD_REQUEST)

        # Fetch the mentor, availability, and time slot instances
        try:
            mentor = get_object_or_404(Mentor, username_id=mentor_id)
            availability = get_object_or_404(Availability, id=availability_id)
            time_slot = get_object_or_404(TimeSlot, id=time_slot_id)
        except Exception as e:
            logger.error("Error fetching Mentor, Availability, or Time Slot: %s", str(e))
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)

        # Check for overlapping bookings
        overlapping_bookings = Booking.objects.filter(
            mentor=mentor,
            availability=availability,
            start_time__lt=end_time,
            end_time__gt=start_time
        )

        if overlapping_bookings.exists():
            logger.warning("The selected time slot is already booked.")
            return Response({"error": "The selected time slot is already booked."}, status=status.HTTP_409_CONFLICT)

        # Prepare data for the booking
        booking_data = {
            'mentor': mentor.username_id,
            'mentee': request.user.id,
            'availability': availability.id,
            'time_slot': time_slot.id,
            'start_time': start_time,
            'end_time': end_time,
            'payment_status': False  # Initial payment status is False
        }

        # Validate and save the booking using the serializer
        serializer = self.get_serializer(data=booking_data)
        if not serializer.is_valid():
            logger.error("Serializer validation error: %s", serializer.errors)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        booking = serializer.save()

        # Start the auto-delete thread for unpaid bookings
        delete_unpaid_booking(booking.id)

        # Create Razorpay order
        try:
            amount = int(time_slot.price * 100)  # Convert price to paise
            razorpay_order = client.order.create({
                'amount': amount,  # Amount in paise
                'currency': 'INR',
                'payment_capture': '1'
            })
        except Exception as e:
            logger.error("Error creating Razorpay order: %s", str(e))
            return Response({"error": "Failed to create Razorpay order."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        # Create a Payment entry linked to the booking
        Payment.objects.create(
            booking=booking,
            razorpay_order_id=razorpay_order['id'],
            amount=time_slot.price,
            status='Pending'
        )

        logger.info("Razorpay order created: %s", razorpay_order['id'])

        # Return Razorpay order details for frontend payment processing
        return Response({
            'razorpay_order_id': razorpay_order['id'],
            'razorpay_key': settings.RAZORPAY_API_KEY,
            'amount': amount,
            'currency': 'INR',
            'booking_id': booking.id
        }, status=status.HTTP_201_CREATED)

from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from django.shortcuts import get_object_or_404
from core.models import Booking
from automation.models import GoogleCredentials
from automation.utils import create_google_meet_event
from rest_framework.permissions import IsAuthenticated
from django.core.exceptions import PermissionDenied

class BookingStatusUpdateView(APIView):
    permission_classes = [IsAuthenticated]

    def patch(self, request, booking_id):
        # Get the booking
        booking = get_object_or_404(Booking, id=booking_id)

        # Ensure the mentor approving the booking is the one associated with the booking
        if booking.mentor.username.id != request.user.id:
            raise PermissionDenied("You do not have permission to modify this booking.")

        # Get new status and meeting link from the request data
        new_status = request.data.get('booking_status')
        meeting_link = request.data.get('meeting_link', None)

        # Validate the new status
        if new_status not in ['approved', 'rejected']:
            return Response({'error': 'Invalid booking status'}, status=status.HTTP_400_BAD_REQUEST)

        # Update the meeting link only if the status is 'approved' and the link is provided
        if new_status == 'approved':
            if meeting_link:
                booking.meeting_link = meeting_link
            else:
                return Response({'error': 'Meeting link is required for approval.'}, status=status.HTTP_400_BAD_REQUEST)

        # Update the booking status and save
        booking.booking_status = new_status
        booking.save()

        return Response({'detail': f'Booking status updated to {new_status}.'}, status=status.HTTP_200_OK)


class VerifyPaymentView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        # Extract payment details from the request
        payment_id = request.data.get('razorpay_payment_id')
        order_id = request.data.get('razorpay_order_id')
        signature = request.data.get('razorpay_signature')
        booking_id = request.data.get('booking_id')

        # Log the received payment details
        logger.info(f"Payment verification initiated: payment_id={payment_id}, order_id={order_id}, signature={signature}, booking_id={booking_id}")

        # Ensure all required fields are present
        if not all([payment_id, order_id, signature, booking_id]):
            logger.error("Missing required payment details in request.")
            return Response({'error': 'Missing payment details.'}, status=status.HTTP_400_BAD_REQUEST)

        # Fetch the booking using the booking_id
        booking = get_object_or_404(Booking, id=booking_id)

        # Fetch the related payment object for this booking
        payment = get_object_or_404(Payment, booking=booking)

        try:
            # Verify the payment using the utility function
            if verify_payment(payment_id, order_id, signature):
                # Update payment and booking status if successful
                booking.payment_status = True
                booking.save()

                # Update the payment details
                payment.razorpay_payment_id = payment_id
                payment.razorpay_signature = signature
                payment.status = 'Success'
                payment.save()

                logger.info(f"Payment verification successful for booking_id={booking_id}, payment_id={payment_id}.")
                return Response({'status': 'Payment successful!'}, status=status.HTTP_200_OK)
            else:
                logger.warning(f"Payment verification failed for booking_id={booking_id}, payment_id={payment_id}.")
                # Update the payment status to failed if verification failed
                payment.status = 'Failed'
                payment.save()
                return Response({'error': 'Payment verification failed'}, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"Error during payment verification for booking_id={booking_id}: {str(e)}")
            return Response({'error': 'An error occurred during payment verification.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    
class ConvertToMentorView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        user = request.user
        if user.user_type == 'mentee':
            user.convert_to_mentor()
            return Response({'message': 'User converted to mentor successfully.'}, status=status.HTTP_200_OK)
        return Response({'error': 'User is already a mentor.'}, status=status.HTTP_400_BAD_REQUEST)

class LoggedInMentorDetailView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        try:
            mentor = Mentor.objects.get(username=request.user)
            serializer = MentorSerializer(mentor)
            return Response(serializer.data)
        except Mentor.DoesNotExist:
            return Response({"error": "Mentor not found"}, status=404)

    def put(self, request):
        try:
            mentor = Mentor.objects.get(username=request.user)
            serializer = MentorSerializer(mentor, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data)
            else:
                print(serializer.errors)  # Add this line for debugging
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Mentor.DoesNotExist:
            return Response({"error": "Mentor not found"}, status=404)

class TimeBlockList(generics.ListAPIView):
    queryset = TimeBlock.objects.all()
    serializer_class = TimeBlockSerializer

class MentorTimeBlockListCreateView(generics.ListCreateAPIView):
    serializer_class = MentorTimeBlockSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        mentor = Mentor.objects.get(username=self.request.user)
        return MentorTimeBlock.objects.filter(mentor=mentor)

    def perform_create(self, serializer):
        mentor = Mentor.objects.get(username=self.request.user)
        time_block_id = self.request.data.get('time_block_id')
        price = self.request.data.get('price')

        # Log the data received for creating the time block
        logger.info(f"Received data for creating time block: time_block_id={time_block_id}, price={price}")

        time_block = get_object_or_404(TimeBlock, id=time_block_id)

        # Save the data and log the created object
        mentor_time_block = serializer.save(mentor=mentor, time_block=time_block, price=price)
        logger.info(f"Created MentorTimeBlock: {mentor_time_block}")

    def perform_update(self, serializer):
        mentor = Mentor.objects.get(username=self.request.user)

        # Log the data received for updating the time block
        logger.info(f"Received data for updating time block: {serializer.validated_data}")

        updated_time_block = serializer.save(mentor=mentor)
        
        # Log the updated object
        logger.info(f"Updated MentorTimeBlock: {updated_time_block}")

    def delete(self, request, *args, **kwargs):
        mentor = Mentor.objects.get(username=self.request.user)
        time_block_id = request.data.get('time_block_id')
        
        # Log the data received for deleting the time block
        logger.info(f"Received request to delete time block: time_block_id={time_block_id}")

        if not time_block_id:
            logger.error("Time Block ID is missing in the delete request")
            return Response({'error': 'Time Block ID is required'}, status=status.HTTP_400_BAD_REQUEST)

        mentor_time_block = get_object_or_404(MentorTimeBlock, mentor=mentor, time_block_id=time_block_id)
        
        # Log the object before deletion
        logger.info(f"Deleting MentorTimeBlock: {mentor_time_block}")
        
        mentor_time_block.delete()
        
        # Log successful deletion
        logger.info(f"Successfully deleted MentorTimeBlock: time_block_id={time_block_id}")
        
        return Response(status=status.HTTP_204_NO_CONTENT)

class MenteeBookingView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        mentee = request.user  # Assuming mentee is authenticated
        bookings = Booking.objects.filter(mentee=mentee)  # Fetch bookings for the logged-in mentee
        serializer = MenteeBookingSerializer(bookings, many=True)
        return Response(serializer.data)
    
class MenteeProfileView(generics.RetrieveUpdateAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = MenteeProfileSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        return self.request.user

    def patch(self, request, *args, **kwargs):
        print("Request Data for PATCH:", request.data)  # Log the request data
        
        serializer = self.get_serializer(self.get_object(), data=request.data, partial=True)
        if not serializer.is_valid():
            print("Validation Errors:", serializer.errors)  # Log the validation errors
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        
        return super().patch(request, *args, **kwargs)
class MentorBookingListView(ListAPIView):
    serializer_class = MentorBookingSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # Fetch only the bookings for the logged-in mentor
        mentor = self.request.user.mentor_profile
        return Booking.objects.filter(mentor=mentor).select_related('mentee', 'availability', 'time_slot')

class MenteeProfileDetailView(generics.RetrieveAPIView):
    queryset = CustomUser.objects.filter(user_type='mentee')  # Only allow mentees
    serializer_class = MenteeProfileSerializer
    permission_classes = [IsAuthenticated]
     # Ensure only authenticated users can access

    def get_queryset(self):
        return CustomUser.objects.filter(user_type='mentee')

================
File: events/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-06-22 17:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0016_delete_timeblock_alter_mentor_time_blocks'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.mentor')),
                ('participants', models.ManyToManyField(blank=True, related_name='events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: events/migrations/0002_remove_event_participants_event_introductory_video_and_more.py
================
# Generated by Django 5.0 on 2024-06-24 12:09

import events.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='event',
            name='participants',
        ),
        migrations.AddField(
            model_name='event',
            name='introductory_video',
            field=models.URLField(blank=True, null=True, validators=[events.models.validate_youtube_url]),
        ),
        migrations.AddField(
            model_name='event',
            name='price',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='takeaways',
            field=models.TextField(blank=True, null=True),
        ),
    ]

================
File: events/migrations/0003_alter_eventregistration_unique_together.py
================
# Generated by Django 5.0 on 2024-06-26 12:07

from django.conf import settings
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0002_remove_event_participants_event_introductory_video_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='eventregistration',
            unique_together={('event', 'user')},
        ),
    ]

================
File: events/migrations/0004_event_photo.py
================
# Generated by Django 5.0 on 2024-06-27 14:18

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0003_alter_eventregistration_unique_together'),
    ]

    operations = [
        migrations.AddField(
            model_name='event',
            name='photo',
            field=models.ImageField(blank=True, null=True, upload_to='event_photos/'),
        ),
    ]

================
File: events/migrations/0005_eventregistration_payment_status_eventpayment.py
================
# Generated by Django 5.0 on 2024-08-29 13:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0004_event_photo'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='eventregistration',
            name='payment_status',
            field=models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed')], default='Pending', max_length=20),
        ),
        migrations.CreateModel(
            name='EventPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('payment_status', models.CharField(choices=[('Pending', 'Pending'), ('Success', 'Success'), ('Failed', 'Failed')], default='Pending', max_length=20)),
                ('razorpay_order_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('razorpay_payment_id', models.CharField(blank=True, max_length=255, null=True)),
                ('razorpay_signature', models.CharField(blank=True, max_length=255, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('event_registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='events.eventregistration')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: events/migrations/0006_event_background_image.py
================
# Generated by Django 5.1.1 on 2024-09-12 19:56

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0005_eventregistration_payment_status_eventpayment'),
    ]

    operations = [
        migrations.AddField(
            model_name='event',
            name='background_image',
            field=models.ImageField(blank=True, null=True, upload_to='event_backgrounds/'),
        ),
    ]

================
File: events/migrations/0007_event_slug.py
================
# Generated by Django 5.1.1 on 2024-09-14 20:23

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0006_event_background_image'),
    ]

    operations = [
        migrations.AddField(
            model_name='event',
            name='slug',
            field=models.SlugField(blank=True, null=True, unique=True),
        ),
    ]

================
File: events/admin.py
================
from django.contrib import admin
from .models import Event, EventRegistration, EventPayment

class EventRegistrationInline(admin.TabularInline):
    model = EventRegistration
    extra = 0  # Set this to 0 to make it optional

class EventAdmin(admin.ModelAdmin):
    list_display = ('title', 'date', 'start_time', 'end_time', 'mentor', 'price')
    search_fields = ('title', 'mentor__username', 'mentor__name')
    list_filter = ('date', 'mentor', 'price')
    ordering = ('date', 'start_time')
    inlines = [EventRegistrationInline]  # The inline is optional now

class EventRegistrationAdmin(admin.ModelAdmin):
    list_display = ('event', 'user', 'registration_date', 'payment_status')
    search_fields = ('event__title', 'user__username', 'user__email')
    list_filter = ('registration_date', 'event', 'payment_status')
    ordering = ('registration_date',)

class EventPaymentAdmin(admin.ModelAdmin):
    list_display = ('get_event_title','user',  'amount', 'payment_status', 'payment_date', 'razorpay_order_id', 'razorpay_payment_id', 'verified')
    search_fields = ('user__username', 'event_registration__event__title', 'razorpay_order_id', 'razorpay_signature')
    list_filter = ('payment_status', 'payment_date', 'verified')
    ordering = ('-payment_date',)
    autocomplete_fields = ['event_registration', 'user']

    def get_event_title(self, obj):
        return obj.event_registration.event.title
    get_event_title.short_description = 'Event'

admin.site.register(Event, EventAdmin)
admin.site.register(EventRegistration, EventRegistrationAdmin)
admin.site.register(EventPayment, EventPaymentAdmin)

================
File: events/apps.py
================
from django.apps import AppConfig


class EventsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'events'

================
File: events/models.py
================
from django.db import models
from django.conf import settings
from core.models import Mentor
from django.core.exceptions import ValidationError
from django.utils.text import slugify
import re


def validate_youtube_url(value):
    youtube_regex = (
        r'^(https?\:\/\/)?(www\.youtube\.com|youtu\.?be)\/.+$'
    )
    if not re.match(youtube_regex, value):
        raise ValidationError(
            'Invalid YouTube URL',
            params={'value': value},
        )

class Event(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    date = models.DateField()
    start_time = models.TimeField()
    end_time = models.TimeField()
    location = models.CharField(max_length=255, blank=True, null=True)
    mentor = models.ForeignKey(Mentor, related_name='events', on_delete=models.CASCADE)
    takeaways = models.TextField(blank=True, null=True)
    introductory_video = models.URLField(blank=True, null=True, validators=[validate_youtube_url])
    price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    photo = models.ImageField(upload_to='event_photos/', blank=True, null=True)
    background_image = models.ImageField(upload_to='event_backgrounds/', blank=True, null=True)  # New background image field
    slug = models.SlugField(unique=True, blank=True, null=True)

    def save(self, *args, **kwargs):
        if not self.slug:  # Only create slug if not present
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)
    def __str__(self):
        return self.title

    @property
    def participants(self):
        return [registration.user for registration in self.registrations.all()]


class EventRegistration(models.Model):
    event = models.ForeignKey(Event, related_name='registrations', on_delete=models.CASCADE)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='event_registrations', on_delete=models.CASCADE)
    registration_date = models.DateTimeField(auto_now_add=True)
    payment_status = models.CharField(max_length=20, choices=[('Pending', 'Pending'), ('Completed', 'Completed')], default='Pending')

    class Meta:
        unique_together = ('event', 'user')

    def __str__(self):
        return f'{self.user.username} registered for {self.event.title}'

class EventPayment(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    event_registration = models.OneToOneField(EventRegistration, on_delete=models.CASCADE, related_name='payment')
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    payment_date = models.DateTimeField(auto_now_add=True)
    payment_status = models.CharField(max_length=20, choices=[('Pending', 'Pending'), ('Success', 'Success'), ('Failed', 'Failed')], default='Pending')
    razorpay_order_id = models.CharField(max_length=255, unique=True, blank=True, null=True)
    razorpay_payment_id = models.CharField(max_length=255, blank=True, null=True)
    razorpay_signature = models.CharField(max_length=255, blank=True, null=True)
    verified = models.BooleanField(default=False)

    def __str__(self):
        return f'{self.user.username} - {self.event_registration.event.title} - {self.amount}'

================
File: events/serializers.py
================
from rest_framework import serializers
from .models import Event, EventRegistration, EventPayment

class EventRegistrationSerializer(serializers.ModelSerializer):
    event_title = serializers.CharField(source='event.title', read_only=True)
    mentor_name = serializers.CharField(source='event.mentor.username', read_only=True)
    slug = serializers.CharField(source='event.slug', read_only=True)
    photo = serializers.ImageField(source='event.photo', read_only=True)

    class Meta:
        model = EventRegistration
        fields = ['id', 'user', 'event', 'event_title','photo', 'slug', 'mentor_name', 'registration_date', 'payment_status']

    def create(self, validated_data):
        user = self.context['request'].user
        event = validated_data.get('event')

        if EventRegistration.objects.filter(event=event, user=user).exists():
            raise serializers.ValidationError('You have already registered for this event.')

        registration = EventRegistration(user=user, event=event, payment_status='Pending')
        registration.save()
        return registration

class EventSerializer(serializers.ModelSerializer):
    participants = serializers.SerializerMethodField()

    class Meta:
        model = Event
        fields = '__all__'

    def get_participants(self, obj):
        registrations = EventRegistration.objects.filter(event=obj)
        return [registration.user.username for registration in registrations]


class EventPaymentSerializer(serializers.ModelSerializer):
    event_title = serializers.CharField(source='event_registration.event.title', read_only=True)
    user_name = serializers.CharField(source='user.username', read_only=True)

    class Meta:
        model = EventPayment
        fields = ['id', 'user', 'user_name', 'event_registration', 'event_title', 'amount', 'payment_date', 'payment_status', 'razorpay_order_id', 'razorpay_payment_id', 'razorpay_signature', 'verified']
        read_only_fields = ['payment_date', 'verified']

================
File: events/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: events/urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import EventViewSet, EventRegistrationViewSet, EventPaymentViewSet, EventPaymentVerificationViewSet,MenteeRegisteredEventsView

router = DefaultRouter()
router.register(r'events', EventViewSet)
router.register(r'event-registrations', EventRegistrationViewSet)
router.register(r'event-payments', EventPaymentViewSet)

urlpatterns = [
    path('', include(router.urls)),  # Include the router for all default routes
    path('events/<slug:slug>/', EventViewSet.as_view({'get': 'retrieve'}), name='event-detail-slug'),  # Slug-based path
    path('event-payment-verification/', EventPaymentVerificationViewSet.as_view({'post': 'create'})),
    path('mentee/events/', MenteeRegisteredEventsView.as_view(), name='mentee-registered-events'),
]

================
File: events/views.py
================
from rest_framework import viewsets, status
from rest_framework.response import Response
from .models import Event, EventRegistration, EventPayment
from .serializers import EventSerializer, EventRegistrationSerializer, EventPaymentSerializer
from rest_framework.permissions import IsAuthenticated, AllowAny
from razorpay import Client
from django.conf import settings
from django.utils.crypto import hmac
import hashlib
import logging
from rest_framework.views import APIView

# Get an instance of a logger
logger = logging.getLogger('events')
# Initialize the Razorpay client with your API key and secret
razorpay_client = Client(auth=(settings.RAZORPAY_API_KEY, settings.RAZORPAY_API_SECRET))

class EventViewSet(viewsets.ModelViewSet):
    queryset = Event.objects.all()
    serializer_class = EventSerializer
    permission_classes = [AllowAny]


class EventPaymentViewSet(viewsets.ModelViewSet):
    queryset = EventPayment.objects.all()
    serializer_class = EventPaymentSerializer

    def update(self, request, *args, **kwargs):
        payment = self.get_object()
        logger.debug(f"Updating payment with ID: {payment.id}")

        try:
            # Store the Razorpay details including the signature
            payment.razorpay_payment_id = request.data.get('razorpay_payment_id')
            payment.razorpay_signature = request.data.get('razorpay_signature')
            payment.payment_status = 'Success' if request.data.get('status') == 'Success' else 'Failed'
            payment.save()

            logger.info(f"Payment {payment.id} updated successfully")

            if payment.payment_status == 'Success':
                payment.event_registration.payment_status = 'Completed'
                payment.event_registration.save()

                logger.info(f"Registration {payment.event_registration.id} marked as completed")

            return Response({"status": "Payment status updated and signature stored."})

        except Exception as e:
            logger.error(f"Failed to update payment: {str(e)}")
            return Response({"status": "Failed to update payment."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class EventRegistrationViewSet(viewsets.ModelViewSet):
    queryset = EventRegistration.objects.all()
    serializer_class = EventRegistrationSerializer

    def create(self, request, *args, **kwargs):
        logger.debug("Creating a new event registration")
        event = Event.objects.get(id=request.data.get('event'))
        user = request.user

        existing_registration = EventRegistration.objects.filter(event=event, user=user).first()
        if existing_registration:
            logger.warning(f"User {user.id} has already registered for event {event.id}")
            return Response({"detail": "You have already registered for this event."}, status=status.HTTP_400_BAD_REQUEST)

        registration = EventRegistration.objects.create(
            user=user,
            event=event,
            payment_status='Pending'
        )
        logger.info(f"Event registration created with ID: {registration.id}")

        # Create a Razorpay order
        try:
            razorpay_order = razorpay_client.order.create({
                "amount": int(event.price * 100),  # Amount in paisa
                "currency": "INR",
                "receipt": str(registration.id),
                "payment_capture": 1
            })
            logger.debug(f"Razorpay order created with ID: {razorpay_order['id']}")

            payment = EventPayment.objects.create(
                user=user,
                event_registration=registration,
                amount=event.price,
                razorpay_order_id=razorpay_order['id']
            )
            logger.info(f"Payment created with ID: {payment.id}")

            return Response({
                "registration_id": registration.id,
                "razorpay_order_id": razorpay_order['id'],
                "amount": event.price
            }, status=status.HTTP_201_CREATED)
        except Exception as e:
            logger.error(f"Failed to create Razorpay order: {str(e)}")
            return Response({"detail": "Failed to create Razorpay order."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
class EventPaymentVerificationViewSet(viewsets.ViewSet):
    def create(self, request, *args, **kwargs):
        payment_id = request.data.get('razorpay_payment_id')
        order_id = request.data.get('razorpay_order_id')
        signature = request.data.get('razorpay_signature')

        payment = EventPayment.objects.get(razorpay_order_id=order_id)

        # Generate the signature using the payment details
        generated_signature = hmac.new(
            key=settings.RAZORPAY_API_SECRET.encode(),
            msg=(order_id + "|" + payment_id).encode(),
            digestmod=hashlib.sha256
        ).hexdigest()

        if generated_signature == signature:
            payment.verified = True
            payment.payment_status = 'Success'
            payment.event_registration.payment_status = 'Completed'
            payment.event_registration.save()
            payment.save()

            return Response({"status": "Payment verified and registration completed."}, status=status.HTTP_200_OK)
        else:
            payment.payment_status = 'Failed'
            payment.save()
            return Response({"status": "Payment verification failed."}, status=status.HTTP_400_BAD_REQUEST)

class MenteeRegisteredEventsView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user  # Get the logged-in user (mentee)
        registrations = EventRegistration.objects.filter(user=user)  # Fetch all events the user has registered for
        serializer = EventRegistrationSerializer(registrations, many=True)
        return Response(serializer.data)

================
File: industry/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-06-18 19:47

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Expertise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
    ]

================
File: industry/migrations/0002_expertise_expertise_description.py
================
# Generated by Django 5.1.1 on 2024-09-25 18:51

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('industry', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='expertise',
            name='expertise_description',
            field=models.TextField(blank=True, null=True),
        ),
    ]

================
File: industry/apps.py
================
from django.apps import AppConfig


class IndustryConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'industry'

================
File: industry/models.py
================
from django.db import models

class Expertise(models.Model):
    name = models.CharField(max_length=255)
    expertise_description = models.TextField(blank=True, null=True)
    def __str__(self):
        return self.name

================
File: industry/serializers.py
================
# expertise/serializers.py
from rest_framework import serializers
from .models import Expertise

class ExpertiseSerializer(serializers.ModelSerializer):
    class Meta:
        model = Expertise
        fields = ['id', 'name','expertise_description']

================
File: industry/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: industry/urls.py
================
# expertise/urls.py
from django.urls import path
from .views import ExpertiseListView

urlpatterns = [
    path('', ExpertiseListView.as_view(), name='expertise-list'),
]

================
File: industry/views.py
================
from rest_framework import generics
from .models import Expertise
from .serializers import ExpertiseSerializer
from rest_framework.permissions import IsAuthenticated, AllowAny

class ExpertiseListView(generics.ListAPIView):
    queryset = Expertise.objects.all()
    serializer_class = ExpertiseSerializer
    permission_classes = [AllowAny]

================
File: mentorbooking/migrations/0001_initial.py
================
# Generated by Django 5.1.1 on 2024-09-30 16:17

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('scheduling', '0011_delete_booking'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('payment_status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('availability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduling.availability')),
                ('mentee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentee_bookings', to=settings.AUTH_USER_MODEL)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduling.timeslot')),
            ],
        ),
    ]

================
File: mentorbooking/migrations/0002_alter_booking_availability_alter_booking_mentor_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-30 18:42

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('mentorbooking', '0001_initial'),
        ('scheduling', '0011_delete_booking'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='booking',
            name='availability',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='scheduling.availability'),
        ),
        migrations.AlterField(
            model_name='booking',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_bookings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='booking',
            name='time_slot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='scheduling.timeslot'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razorpay_order_id', models.CharField(max_length=100)),
                ('razorpay_payment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('razorpay_signature', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(default='Pending', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='mentorbooking.booking')),
            ],
        ),
    ]

================
File: mentorbooking/migrations/0003_remove_payment_booking_delete_booking_delete_payment.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:24

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('mentorbooking', '0002_alter_booking_availability_alter_booking_mentor_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='payment',
            name='booking',
        ),
        migrations.DeleteModel(
            name='Booking',
        ),
        migrations.DeleteModel(
            name='Payment',
        ),
    ]

================
File: mentorbooking/apps.py
================
from django.apps import AppConfig


class MentorbookingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'mentorbooking'

================
File: mentorbooking/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: navigation/migrations/0001_initial.py
================
# Generated by Django 5.1.1 on 2024-09-13 12:06

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('url', models.CharField(max_length=255)),
                ('order', models.IntegerField(default=0)),
                ('is_button', models.BooleanField(default=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submenus', to='navigation.menuitem')),
            ],
        ),
    ]

================
File: navigation/migrations/0002_navigationsettings.py
================
# Generated by Django 5.1.1 on 2024-09-13 12:14

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('navigation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='NavigationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('normal_logo', models.ImageField(help_text='Upload logo for the normal header.', upload_to='logos/')),
                ('sticky_logo', models.ImageField(help_text='Upload logo for the sticky header.', upload_to='logos/')),
            ],
        ),
    ]

================
File: navigation/admin.py
================
# navigation/admin.py
from django.contrib import admin
from .models import MenuItem,NavigationSettings

class MenuItemAdmin(admin.ModelAdmin):
    list_display = ('title', 'url', 'parent', 'order', 'is_button')
    list_editable = ('order', 'is_button')
class NavigationSettingsAdmin(admin.ModelAdmin):
    pass
admin.site.register(MenuItem, MenuItemAdmin)
admin.site.register(NavigationSettings, NavigationSettingsAdmin)

================
File: navigation/apps.py
================
from django.apps import AppConfig


class NavigationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'navigation'

================
File: navigation/models.py
================
# navigation/models.py
from django.db import models

class MenuItem(models.Model):
    title = models.CharField(max_length=255)
    url = models.CharField(max_length=255)
    parent = models.ForeignKey('self', null=True, blank=True, on_delete=models.CASCADE, related_name='submenus')
    order = models.IntegerField(default=0)
    is_button = models.BooleanField(default=False)  # For buttons like "Browse mentors"

    def __str__(self):
        return self.title


class NavigationSettings(models.Model):
    normal_logo = models.ImageField(upload_to='logos/', help_text="Upload logo for the normal header.")
    sticky_logo = models.ImageField(upload_to='logos/', help_text="Upload logo for the sticky header.")

    def __str__(self):
        return "Navigation Settings"

================
File: navigation/serializers.py
================
# navigation/serializers.py
from rest_framework import serializers
from .models import MenuItem, NavigationSettings

class MenuItemSerializer(serializers.ModelSerializer):
    submenus = serializers.SerializerMethodField()

    class Meta:
        model = MenuItem
        fields = ['title', 'url', 'is_button', 'submenus']

    def get_submenus(self, obj):
        submenus = obj.submenus.all().order_by('order')
        return MenuItemSerializer(submenus, many=True).data

class NavigationSettingsSerializer(serializers.ModelSerializer):
    class Meta:
        model = NavigationSettings
        fields = ['normal_logo', 'sticky_logo']

================
File: navigation/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: navigation/urls.py
================
# navigation/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('api/menus/', views.menu_list, name='menu-list'),
]

================
File: navigation/views.py
================
# navigation/views.py
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from django.conf import settings
from .models import MenuItem, NavigationSettings
from .serializers import MenuItemSerializer, NavigationSettingsSerializer

@api_view(['GET'])
@permission_classes([AllowAny])  # Allow all users (authenticated or not) to access this view
def menu_list(request):
    # Get the menu items
    menus = MenuItem.objects.filter(parent__isnull=True).order_by('order')
    menu_serializer = MenuItemSerializer(menus, many=True)

    # Get the navigation settings (for logos)
    settings = NavigationSettings.objects.first()

    if settings:
        logos = {
            'normal_logo': request.build_absolute_uri(settings.normal_logo.url),
            'sticky_logo': request.build_absolute_uri(settings.sticky_logo.url),
        }
    else:
        logos = {'normal_logo': '', 'sticky_logo': ''}

    return Response({
        'menu': menu_serializer.data,
        'logos': logos
    })

================
File: scheduling/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-06-18 19:20

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booked_at', models.DateTimeField(auto_now_add=True)),
                ('availability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='scheduling.availability')),
                ('mentee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

================
File: scheduling/migrations/0002_alter_availability_mentor.py
================
# Generated by Django 5.0 on 2024-06-18 22:09

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0014_alter_mentor_experience_delete_workexperience'),
        ('scheduling', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='availability',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='core.mentor'),
        ),
    ]

================
File: scheduling/migrations/0003_alter_availability_mentor.py
================
# Generated by Django 5.0 on 2024-06-18 22:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0002_alter_availability_mentor'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='availability',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to=settings.AUTH_USER_MODEL),
        ),
    ]

================
File: scheduling/migrations/0004_booking_status.py
================
# Generated by Django 5.0 on 2024-06-18 22:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0003_alter_availability_mentor'),
    ]

    operations = [
        migrations.AddField(
            model_name='booking',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10),
        ),
    ]

================
File: scheduling/migrations/0005_delete_booking.py
================
# Generated by Django 5.0 on 2024-06-19 20:39

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0004_booking_status'),
    ]

    operations = [
        migrations.DeleteModel(
            name='Booking',
        ),
    ]

================
File: scheduling/migrations/0006_timeslot_booking.py
================
# Generated by Django 5.1.1 on 2024-09-27 19:40

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0005_delete_booking'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('duration', models.IntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_booked', models.BooleanField(default=False)),
                ('availability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='scheduling.availability')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_time', models.DateTimeField(auto_now_add=True)),
                ('confirmed', models.BooleanField(default=False)),
                ('mentee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentee_bookings', to=settings.AUTH_USER_MODEL)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('timeslot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking', to='scheduling.timeslot')),
            ],
        ),
    ]

================
File: scheduling/migrations/0007_remove_booking_timeslot_booking_availability_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-27 20:00

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0006_timeslot_booking'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='booking',
            name='timeslot',
        ),
        migrations.AddField(
            model_name='booking',
            name='availability',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='scheduling.availability'),
        ),
        migrations.AddField(
            model_name='booking',
            name='end_time',
            field=models.TimeField(default=datetime.time(23, 59)),
        ),
        migrations.AddField(
            model_name='booking',
            name='start_time',
            field=models.TimeField(default=datetime.time(0, 0)),
        ),
        migrations.CreateModel(
            name='TimeBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.IntegerField(choices=[(15, '15 mins'), (30, '30 mins'), (45, '45 mins'), (60, '60 mins')])),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_blocks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='booking',
            name='time_block',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='scheduling.timeblock'),
        ),
        migrations.DeleteModel(
            name='TimeSlot',
        ),
    ]

================
File: scheduling/migrations/0008_remove_booking_time_block_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-27 20:14

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0023_mentor_joined_date'),
        ('scheduling', '0007_remove_booking_timeslot_booking_availability_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='booking',
            name='time_block',
        ),
        migrations.RemoveField(
            model_name='booking',
            name='booking_time',
        ),
        migrations.RemoveField(
            model_name='booking',
            name='confirmed',
        ),
        migrations.AddField(
            model_name='booking',
            name='booking_date',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='booking',
            name='payment_status',
            field=models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed')], default='Pending', max_length=20),
        ),
        migrations.AlterField(
            model_name='availability',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='core.mentor'),
        ),
        migrations.AlterField(
            model_name='booking',
            name='availability',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduling.availability'),
        ),
        migrations.AlterField(
            model_name='booking',
            name='end_time',
            field=models.TimeField(),
        ),
        migrations.AlterField(
            model_name='booking',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_bookings', to='core.mentor'),
        ),
        migrations.AlterField(
            model_name='booking',
            name='start_time',
            field=models.TimeField(),
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.IntegerField(choices=[(15, '15 mins'), (30, '30 mins'), (45, '45 mins'), (60, '60 mins')])),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('availability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='scheduling.availability')),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='core.mentor')),
            ],
        ),
        migrations.AddField(
            model_name='booking',
            name='time_slot',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='scheduling.timeslot'),
        ),
        migrations.DeleteModel(
            name='TimeBlock',
        ),
    ]

================
File: scheduling/migrations/0009_alter_booking_unique_together_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-27 20:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0023_mentor_joined_date'),
        ('scheduling', '0008_remove_booking_time_block_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='booking',
            unique_together={('mentor', 'mentee', 'start_time', 'end_time')},
        ),
        migrations.AlterUniqueTogether(
            name='timeslot',
            unique_together={('mentor', 'duration')},
        ),
        migrations.AddField(
            model_name='booking',
            name='created_at',
            field=models.DateTimeField(default=None),
        ),
        migrations.AlterField(
            model_name='booking',
            name='availability',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='scheduling.availability'),
        ),
        migrations.AlterField(
            model_name='booking',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='core.mentor'),
        ),
        migrations.AlterField(
            model_name='booking',
            name='payment_status',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='booking',
            name='time_slot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='scheduling.timeslot'),
        ),
        migrations.AlterField(
            model_name='timeslot',
            name='duration',
            field=models.PositiveIntegerField(),
        ),
        migrations.RemoveField(
            model_name='booking',
            name='booking_date',
        ),
        migrations.RemoveField(
            model_name='timeslot',
            name='availability',
        ),
    ]

================
File: scheduling/migrations/0010_alter_availability_mentor_alter_booking_mentor_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-28 17:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0009_alter_booking_unique_together_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='availability',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='booking',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='timeslot',
            name='mentor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to=settings.AUTH_USER_MODEL),
        ),
    ]

================
File: scheduling/migrations/0011_delete_booking.py
================
# Generated by Django 5.1.1 on 2024-09-30 16:01

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0010_alter_availability_mentor_alter_booking_mentor_and_more'),
    ]

    operations = [
        migrations.DeleteModel(
            name='Booking',
        ),
    ]

================
File: scheduling/migrations/0012_alter_timeslot_unique_together_and_more.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0029_remove_mentor_schedule_booking_meeting_link'),
        ('mentorbooking', '0003_remove_payment_booking_delete_booking_delete_payment'),
        ('scheduling', '0011_delete_booking'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='timeslot',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='timeslot',
            name='mentor',
        ),
        migrations.CreateModel(
            name='GoogleCredentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credentials', models.JSONField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name='Availability',
        ),
        migrations.DeleteModel(
            name='TimeSlot',
        ),
    ]

================
File: scheduling/migrations/0013_availability_timeslot_delete_googlecredentials.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0012_alter_timeslot_unique_together_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.PositiveIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('mentor', 'duration')},
            },
        ),
        migrations.DeleteModel(
            name='GoogleCredentials',
        ),
    ]

================
File: scheduling/migrations/0014_alter_timeslot_unique_together_and_more.py
================
# Generated by Django 5.1.1 on 2024-10-03 21:53

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0013_availability_timeslot_delete_googlecredentials'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='timeslot',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='timeslot',
            name='mentor',
        ),
        migrations.CreateModel(
            name='GoogleCredentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credentials', models.JSONField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name='Availability',
        ),
        migrations.DeleteModel(
            name='TimeSlot',
        ),
    ]

================
File: scheduling/migrations/0015_availability_timeslot_delete_googlecredentials.py
================
# Generated by Django 5.1.1 on 2024-10-03 23:16

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scheduling', '0014_alter_timeslot_unique_together_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.PositiveIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mentor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('mentor', 'duration')},
            },
        ),
        migrations.DeleteModel(
            name='GoogleCredentials',
        ),
    ]

================
File: scheduling/admin.py
================
from django.contrib import admin
from .models import Availability, TimeSlot

@admin.register(Availability)
class AvailabilityAdmin(admin.ModelAdmin):
    list_display = ('mentor', 'date', 'start_time', 'end_time')
    list_filter = ('mentor', 'date')


@admin.register(TimeSlot)
class TimeSlotAdmin(admin.ModelAdmin):
    list_display = ('mentor', 'duration', 'price')
    list_filter = ('mentor', 'duration')

================
File: scheduling/apps.py
================
from django.apps import AppConfig


class SchedulingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'scheduling'

================
File: scheduling/models.py
================
from django.db import models
from datetime import timedelta, date, datetime
from django.conf import settings
from core.models import CustomUser

class Availability(models.Model):
    mentor = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='availabilities')
    date = models.DateField()
    start_time = models.TimeField()
    end_time = models.TimeField()

    def __str__(self):
        return f'{self.mentor.username} - {self.date} ({self.start_time} to {self.end_time})'

    def get_available_slots(self, duration):
        """
        Calculate available time slots in the availability based on the duration
        """
        slots = []
        start_time = datetime.combine(self.date, self.start_time)
        end_time = datetime.combine(self.date, self.end_time)

        while start_time + timedelta(minutes=duration) <= end_time:
            slots.append({
                'start': start_time.time(),
                'end': (start_time + timedelta(minutes=duration)).time(),
            })
            start_time += timedelta(minutes=duration)
        return slots


class TimeSlot(models.Model):
    mentor = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='time_slots')
    duration = models.PositiveIntegerField()  # duration in minutes (15, 30, 45, 60)
    price = models.DecimalField(max_digits=10, decimal_places=2)  # price for the session duration

    class Meta:
        unique_together = ('mentor', 'duration')

    def __str__(self):
        return f'{self.duration} mins - {self.price} INR for {self.mentor.username}'

================
File: scheduling/razorpay_service.py
================
import razorpay
from django.conf import settings
from django.shortcuts import get_object_or_404


razorpay_client = razorpay.Client(auth=(settings.RAZORPAY_API_KEY, settings.RAZORPAY_API_SECRET))

def create_razorpay_order(booking):
    """
    Create Razorpay order for the given booking
    """
    order_amount = int(booking.time_slot.price * 100)  # Razorpay accepts the amount in paise
    order_currency = 'INR'
    order_receipt = f'booking_{booking.id}'

    razorpay_order = razorpay_client.order.create({
        'amount': order_amount,
        'currency': order_currency,
        'receipt': order_receipt,
        'payment_capture': '1'
    })

    return razorpay_order

def verify_payment(razorpay_payment_id, razorpay_order_id, razorpay_signature):
    """
    Verify Razorpay payment
    """
    try:
        razorpay_client.utility.verify_payment_signature({
            'razorpay_payment_id': razorpay_payment_id,
            'razorpay_order_id': razorpay_order_id,
            'razorpay_signature': razorpay_signature
        })
        return True
    except razorpay.errors.SignatureVerificationError:
        return False

================
File: scheduling/serializers.py
================
from rest_framework import serializers
from .models import Availability, TimeSlot

class AvailabilitySerializer(serializers.ModelSerializer):
    class Meta:
        model = Availability
        fields = ['mentor', 'date', 'start_time', 'end_time']


class TimeSlotSerializer(serializers.ModelSerializer):
    class Meta:
        model = TimeSlot
        fields = ['mentor', 'duration', 'price']

================
File: scheduling/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: scheduling/urls.py
================
from django.urls import path
from .views import MentorAvailableSlotsView, TimeSlotListView, AvailabilityListView

urlpatterns = [
    path('availabilities/', AvailabilityListView.as_view(), name='availabilities'),
    path('time-slots/', TimeSlotListView.as_view(), name='time-slots'),
    path('mentor/<int:mentor_id>/available-slots/', MentorAvailableSlotsView.as_view(), name='mentor-available-slots'),
]

================
File: scheduling/utils.py
================
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from datetime import datetime

def create_google_meet_event(mentor_credentials, mentee_email, start_time, end_time):
    try:
        service = build('calendar', 'v3', credentials=mentor_credentials)
        
        event = {
            'summary': 'Mentorship Session',
            'description': 'Google Meet session between mentor and mentee.',
            'start': {
                'dateTime': start_time.isoformat(),
                'timeZone': 'Asia/Kolkata',  # Set your time zone here
            },
            'end': {
                'dateTime': end_time.isoformat(),
                'timeZone': 'Asia/Kolkata',
            },
            'attendees': [
                {'email': mentee_email},  # Mentee's email
            ],
            'conferenceData': {
                'createRequest': {
                    'conferenceSolutionKey': {
                        'type': 'hangoutsMeet',
                    },
                    'requestId': 'random-string-' + str(datetime.now().timestamp()).replace('.', ''),
                },
            },
        }

        event = service.events().insert(calendarId='primary', body=event, conferenceDataVersion=1).execute()
        return event.get('hangoutLink')

    except HttpError as error:
        print(f"An error occurred: {error}")
        return None

================
File: scheduling/views.py
================
from rest_framework import generics, status
from rest_framework.response import Response
from .models import Availability, TimeSlot
from .serializers import AvailabilitySerializer, TimeSlotSerializer
from core.models import CustomUser  # Import Mentor from the correct app
from .razorpay_service import create_razorpay_order, verify_payment
from django.conf import settings
from django.shortcuts import get_object_or_404
from datetime import date


class AvailabilityListView(generics.ListAPIView):
    queryset = Availability.objects.all()
    serializer_class = AvailabilitySerializer


class TimeSlotListView(generics.ListAPIView):
    queryset = TimeSlot.objects.all()
    serializer_class = TimeSlotSerializer


class MentorAvailableSlotsView(generics.ListAPIView):
    """
    Get the available dates and time slots for a mentor
    """
    serializer_class = AvailabilitySerializer

    def get(self, request, mentor_id):
        mentor = get_object_or_404(CustomUser, id=mentor_id)
        availabilities = mentor.availabilities.filter(date__gte=date.today()).order_by('date', 'start_time')
        available_slots = []

        for availability in availabilities:
            for time_slot in mentor.time_slots.all():
                slots = availability.get_available_slots(time_slot.duration)
                available_slots.append({
                    'date': availability.date,
                    'time_slot': time_slot.duration,
                    'price': time_slot.price,
                    'slots': slots
                })

        return Response(available_slots)

================
File: secrets/client_secret.json
================
{"web":{"client_id":"393103658549-hiejl8vkgn5h8lf0k9nrbqsdh6kdovuv.apps.googleusercontent.com","project_id":"menttalk","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_secret":"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","javascript_origins":["http://localhost:8000"]}}

================
File: time_blocks/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-06-21 22:11

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TimeBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.CharField(max_length=10, unique=True)),
            ],
        ),
    ]

================
File: time_blocks/migrations/0002_timeblock_price_alter_timeblock_duration.py
================
# Generated by Django 5.0 on 2024-08-30 08:34

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('time_blocks', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='timeblock',
            name='price',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=10),
        ),
        migrations.AlterField(
            model_name='timeblock',
            name='duration',
            field=models.PositiveIntegerField(),
        ),
    ]

================
File: time_blocks/migrations/0003_remove_timeblock_price.py
================
# Generated by Django 5.0 on 2024-08-30 12:19

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('time_blocks', '0002_timeblock_price_alter_timeblock_duration'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='timeblock',
            name='price',
        ),
    ]

================
File: time_blocks/admin.py
================
from django.contrib import admin
from .models import TimeBlock

class TimeBlockAdmin(admin.ModelAdmin):
    list_display = ('duration',)
    search_fields = ('duration',)
    ordering = ('duration',)

admin.site.register(TimeBlock, TimeBlockAdmin)

================
File: time_blocks/apps.py
================
from django.apps import AppConfig


class TimeBlocksConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'time_blocks'

================
File: time_blocks/models.py
================
from django.db import models

class TimeBlock(models.Model):
    duration = models.PositiveIntegerField()  # Duration in minutes

    def __str__(self):
        return f'{self.duration} minutes'

================
File: time_blocks/serializers.py
================
from rest_framework import serializers
from .models import TimeBlock

class TimeBlockSerializer(serializers.ModelSerializer):
    class Meta:
        model = TimeBlock
        fields = ['id', 'duration']

    def validate_duration(self, value):
        if value <= 0:
            raise serializers.ValidationError("Duration must be a positive number.")
        return value

================
File: time_blocks/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: time_blocks/urls.py
================
from django.urls import path
from .views import TimeBlockListView, TimeBlockDetailView

urlpatterns = [
    path('time-blocks/', TimeBlockListView.as_view(), name='time-block-list'),
    path('time-blocks/<int:pk>/', TimeBlockDetailView.as_view(), name='time-block-detail'),
]

================
File: time_blocks/views.py
================
from rest_framework import generics
from .models import TimeBlock
from .serializers import TimeBlockSerializer

class TimeBlockListView(generics.ListCreateAPIView):
    queryset = TimeBlock.objects.all()
    serializer_class = TimeBlockSerializer

class TimeBlockDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = TimeBlock.objects.all()
    serializer_class = TimeBlockSerializer

================
File: tools/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-06-18 19:47

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
    ]

================
File: tools/apps.py
================
from django.apps import AppConfig


class ToolsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'tools'

================
File: tools/models.py
================
from django.db import models

class Tool(models.Model):
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name

================
File: tools/serializers.py
================
# tools/serializers.py
from rest_framework import serializers
from .models import Tool

class ToolSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tool
        fields = ['id', 'name']

================
File: tools/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: tools/urls.py
================
# tools/urls.py
from django.urls import path
from .views import ToolListView

urlpatterns = [
    path('', ToolListView.as_view(), name='tool-list'),
]

================
File: tools/views.py
================
# tools/views.py
from rest_framework import generics
from .models import Tool
from .serializers import ToolSerializer
from rest_framework.permissions import IsAuthenticated

class ToolListView(generics.ListAPIView):
    queryset = Tool.objects.all()
    serializer_class = ToolSerializer
    permission_classes = [IsAuthenticated]

================
File: webadmin/management/commands/bulk_upload_categories.py
================
import csv
from django.core.management.base import BaseCommand
from webadmin.models import Category

class Command(BaseCommand):
    help = 'Bulk upload categories from a CSV file'

    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str, help='The path to the CSV file')

    def handle(self, *args, **kwargs):
        csv_file = kwargs['csv_file']
        with open(csv_file, newline='', encoding='utf-8') as file:
            reader = csv.reader(file)
            next(reader)  # Skip the header row
            for row in reader:
                name, description, icon, url = row
                Category.objects.create(
                    name=name,
                    description=description,
                    icon=icon,
                    url=url
                )
                self.stdout.write(self.style.SUCCESS(f'Successfully added category {name}'))

================
File: webadmin/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-06-25 14:36

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AboutPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('team_members', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ContactPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('address', models.TextField()),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('subtitle', models.CharField(max_length=255)),
                ('hero_image', models.ImageField(blank=True, null=True, upload_to='hero_images/')),
                ('description', models.TextField()),
                ('call_to_action_text', models.CharField(max_length=255)),
                ('call_to_action_url', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='NewsletterPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('signup_url', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='PrivacyPolicyPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
            ],
        ),
    ]

================
File: webadmin/migrations/0002_custompage.py
================
# Generated by Django 5.0 on 2024-06-25 20:47

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('content', models.JSONField()),
            ],
        ),
    ]

================
File: webadmin/migrations/0003_category_companylogo_faq_and_more.py
================
# Generated by Django 5.0 on 2024-06-26 08:38

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0016_delete_timeblock_alter_mentor_time_blocks'),
        ('webadmin', '0002_custompage'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.ImageField(upload_to='category_icons/')),
                ('url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyLogo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('logo', models.ImageField(upload_to='company_logos/')),
                ('url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField()),
            ],
        ),
        migrations.RemoveField(
            model_name='homepage',
            name='call_to_action_text',
        ),
        migrations.RemoveField(
            model_name='homepage',
            name='call_to_action_url',
        ),
        migrations.RemoveField(
            model_name='homepage',
            name='description',
        ),
        migrations.RemoveField(
            model_name='homepage',
            name='hero_image',
        ),
        migrations.RemoveField(
            model_name='homepage',
            name='subtitle',
        ),
        migrations.RemoveField(
            model_name='homepage',
            name='title',
        ),
        migrations.AddField(
            model_name='homepage',
            name='mentor_search_placeholder',
            field=models.CharField(default='Search for a mentor...', max_length=255),
        ),
        migrations.AddField(
            model_name='homepage',
            name='reviews',
            field=models.ManyToManyField(related_name='homepage_reviews', to='core.review'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='top_mentors',
            field=models.ManyToManyField(related_name='top_mentors', to='core.mentor'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='categories',
            field=models.ManyToManyField(related_name='categories', to='webadmin.category'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='company_logos',
            field=models.ManyToManyField(related_name='company_logos', to='webadmin.companylogo'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='faqs',
            field=models.ManyToManyField(related_name='homepage_faqs', to='webadmin.faq'),
        ),
    ]

================
File: webadmin/migrations/0004_cardsection_ceo_homepage_section_title_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-10 20:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0003_category_companylogo_faq_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CardSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='card_images/')),
            ],
        ),
        migrations.CreateModel(
            name='CEO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('image', models.ImageField(blank=True, null=True, upload_to='ceo_images/')),
                ('position', models.CharField(max_length=255)),
                ('company', models.CharField(max_length=255)),
                ('quote', models.TextField()),
            ],
        ),
        migrations.AddField(
            model_name='homepage',
            name='section_title',
            field=models.CharField(default='Built for founders, marketers, and product people.', max_length=255),
        ),
        migrations.AddField(
            model_name='homepage',
            name='cards',
            field=models.ManyToManyField(related_name='homepage_cards', to='webadmin.cardsection'),
        ),
        migrations.AddField(
            model_name='homepage',
            name='ceo_details',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webadmin.ceo'),
        ),
    ]

================
File: webadmin/migrations/0005_mentoringcta.py
================
# Generated by Django 5.1.1 on 2024-09-10 21:25

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0004_cardsection_ceo_homepage_section_title_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='MentoringCTA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='Get 1:1 Mentorship from Top Startup Experts', max_length=255)),
                ('subtitle', models.CharField(default="India's 1st Startup Mentorship Platform", max_length=255)),
                ('description', models.TextField(default='Don’t waste your time in Trial & Errors, Book 1:1 personalized session with Top experts in various industries.')),
                ('video_url', models.URLField(blank=True, help_text='YouTube URL for the video', null=True)),
                ('top_mentors_count', models.IntegerField(default=100)),
                ('happy_mentees_count', models.IntegerField(default=500)),
                ('sessions_done_count', models.IntegerField(default=1000)),
                ('rating_stars', models.FloatField(default=4.8)),
                ('rating_label', models.CharField(default='Rated by Users', max_length=255)),
            ],
        ),
    ]

================
File: webadmin/migrations/0006_menttalkcta.py
================
# Generated by Django 5.1.1 on 2024-09-12 12:54

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0005_mentoringcta'),
    ]

    operations = [
        migrations.CreateModel(
            name='MenttalkCTA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('subtitle', models.CharField(max_length=255)),
                ('image', models.ImageField(upload_to='menttalk_images/')),
                ('button_text', models.CharField(max_length=255)),
                ('button_url', models.URLField()),
                ('price', models.CharField(max_length=50)),
                ('preorder_info', models.CharField(max_length=255)),
                ('availability_info', models.CharField(max_length=255)),
                ('extra_info', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]

================
File: webadmin/migrations/0007_footer_sociallinks_footerlink_footer_social_links.py
================
# Generated by Django 5.1.1 on 2024-09-12 18:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0006_menttalkcta'),
    ]

    operations = [
        migrations.CreateModel(
            name='Footer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(default='Expert Bells', max_length=255)),
                ('about_text', models.TextField()),
                ('hashtag', models.CharField(default='#GrowWithGuidance', max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('copyright', models.CharField(default='© Copyright 2024 Expert Bells All Rights Reserved.', max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocialLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('instagram', models.URLField(blank=True, null=True)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('youtube', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FooterLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('url', models.URLField()),
                ('section', models.CharField(choices=[('company', 'Company'), ('quick', 'Quick Links'), ('compliance', 'Compliance')], max_length=50)),
                ('footer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='webadmin.footer')),
            ],
        ),
        migrations.AddField(
            model_name='footer',
            name='social_links',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='webadmin.sociallinks'),
        ),
    ]

================
File: webadmin/migrations/0008_alter_footer_company_name_alter_footer_copyright_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-12 19:06

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0007_footer_sociallinks_footerlink_footer_social_links'),
    ]

    operations = [
        migrations.AlterField(
            model_name='footer',
            name='company_name',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='footer',
            name='copyright',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='footer',
            name='hashtag',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='footer',
            name='social_links',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webadmin.sociallinks'),
        ),
    ]

================
File: webadmin/migrations/0009_blogcard_boardofadvisor_corevalue_ctabutton_and_more.py
================
# Generated by Django 5.1.1 on 2024-09-13 18:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0008_alter_footer_company_name_alter_footer_copyright_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('image', models.ImageField(upload_to='blog_images/')),
                ('url', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='BoardOfAdvisor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('photo', models.ImageField(upload_to='board_photos/')),
                ('bio', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CoreValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heading', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CTAButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=100)),
                ('url', models.URLField()),
            ],
        ),
        migrations.RemoveField(
            model_name='aboutpage',
            name='team_members',
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='about_us_story',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='intro_image',
            field=models.ImageField(blank=True, null=True, upload_to='intro_images/'),
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='sub_intro_image1',
            field=models.ImageField(blank=True, null=True, upload_to='intro_images/'),
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='sub_intro_image2',
            field=models.ImageField(blank=True, null=True, upload_to='intro_images/'),
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='team_intro_text',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='blogs',
            field=models.ManyToManyField(related_name='about_page_blogs', to='webadmin.blogcard'),
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='board_of_advisors',
            field=models.ManyToManyField(related_name='about_page_board', to='webadmin.boardofadvisor'),
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='core_values',
            field=models.ManyToManyField(related_name='about_page_core_values', to='webadmin.corevalue'),
        ),
        migrations.CreateModel(
            name='CTACard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('buttons', models.ManyToManyField(to='webadmin.ctabutton')),
            ],
        ),
        migrations.AddField(
            model_name='aboutpage',
            name='cta_card',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webadmin.ctacard'),
        ),
    ]

================
File: webadmin/migrations/0010_teammates.py
================
# Generated by Django 5.1.1 on 2024-09-13 20:39

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0009_blogcard_boardofadvisor_corevalue_ctabutton_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Teammates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('photo', models.ImageField(upload_to='team_photos/')),
                ('bio', models.TextField()),
            ],
        ),
    ]

================
File: webadmin/migrations/0011_aboutpage_teammates.py
================
# Generated by Django 5.1.1 on 2024-09-13 20:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0010_teammates'),
    ]

    operations = [
        migrations.AddField(
            model_name='aboutpage',
            name='teammates',
            field=models.ManyToManyField(related_name='about_teammates', to='webadmin.teammates'),
        ),
    ]

================
File: webadmin/migrations/0012_teammates_linkedinurl_teammates_position.py
================
# Generated by Django 5.1.1 on 2024-09-13 21:25

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('webadmin', '0011_aboutpage_teammates'),
    ]

    operations = [
        migrations.AddField(
            model_name='teammates',
            name='linkedinurl',
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name='teammates',
            name='position',
            field=models.CharField(blank=True, max_length=255),
        ),
    ]

================
File: webadmin/templates/admin/solo/change_form.html
================
{% extends "admin/change_form.html" %}

================
File: webadmin/templates/admin/category_changelist.html
================
{% extends "admin/change_list.html" %}
{% block object-tools %}
    <div class="object-tools" style="display: flex; gap: 10px;">
        <a href="upload-csv/" class="button">Upload CSV</a>
        {{ block.super }}
    </div>
{% endblock %}

================
File: webadmin/templates/admin/csv_form.html
================
{% extends "admin/base_site.html" %}
{% block content %}
  <h1>Upload CSV for Categories</h1>
  <form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    <div style="margin-bottom: 20px;">
      <label>CSV file:</label>
      <input type="file" name="csv_file" accept=".csv">
    </div>
    <div>
      <button type="submit" class="button">Upload</button>
    </div>
  </form>
{% endblock %}

================
File: webadmin/admin.py
================
from django.contrib import admin
from solo.admin import SingletonModelAdmin
from django.urls import path
from django.shortcuts import render, redirect
from django.contrib import messages
import csv
from io import TextIOWrapper
from .models import Homepage, AboutPage, ContactPage, PrivacyPolicyPage, NewsletterPage, CustomPage, CompanyLogo, Category, FAQ, CardSection, CEO
from .models import Teammates,MentoringCTA, MenttalkCTA,Footer, FooterLink, SocialLinks,AboutPage, CoreValue, BoardOfAdvisor, BlogCard, CTAButton, CTACard

class CategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'description')
    change_list_template = "admin/category_changelist.html"

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('upload-csv/', self.upload_csv),
        ]
        return custom_urls + urls

    def upload_csv(self, request):
        if request.method == "POST":
            csv_file = request.FILES["csv_file"]
            if not csv_file.name.endswith('.csv'):
                messages.error(request, "This is not a valid CSV file.")
                return redirect("..")
            try:
                csv_reader = csv.reader(TextIOWrapper(csv_file, encoding='utf-8'))
                next(csv_reader)  # Skip header row
                for row in csv_reader:
                    Category.objects.create(
                        name=row[0],
                        description=row[1],
                        icon=row[2],
                        url=row[3]
                    )
                self.message_user(request, "CSV file uploaded successfully.")
            except Exception as e:
                self.message_user(request, f"Error uploading CSV: {str(e)}", level=messages.ERROR)
            return redirect("..")

        form = {}
        return render(request, "admin/csv_form.html", form)



class FooterLinkInline(admin.TabularInline):
    model = FooterLink
    extra = 1

class FooterAdmin(SingletonModelAdmin):
    inlines = [FooterLinkInline]
class CoreValueAdmin(admin.ModelAdmin):
    list_display = ('heading', 'description')

class BoardOfAdvisorAdmin(admin.ModelAdmin):
    list_display = ('name', 'bio')

class TeammatesAdmin(admin.ModelAdmin):
    list_display = ('name', 'bio')

class BlogCardAdmin(admin.ModelAdmin):
    list_display = ('title', 'url')

class CTAButtonAdmin(admin.ModelAdmin):
    list_display = ('text', 'url')

class CTACardAdmin(admin.ModelAdmin):
    list_display = ('title', 'description')

class AboutPageAdmin(admin.ModelAdmin):
    list_display = ('title', 'description')

admin.site.register(CoreValue, CoreValueAdmin)
admin.site.register(BoardOfAdvisor, BoardOfAdvisorAdmin)
admin.site.register(Teammates, TeammatesAdmin)
admin.site.register(BlogCard, BlogCardAdmin)
admin.site.register(CTAButton, CTAButtonAdmin)
admin.site.register(CTACard, CTACardAdmin)
admin.site.register(AboutPage, AboutPageAdmin)

admin.site.register(Footer, FooterAdmin)
admin.site.register(SocialLinks)
admin.site.register(Category, CategoryAdmin)

admin.site.register(MenttalkCTA, SingletonModelAdmin)
admin.site.register(MentoringCTA, SingletonModelAdmin)
admin.site.register(Homepage, SingletonModelAdmin)
admin.site.register(CompanyLogo)
admin.site.register(FAQ)
admin.site.register(CardSection)
admin.site.register(CEO)
admin.site.register(ContactPage, SingletonModelAdmin)
admin.site.register(PrivacyPolicyPage, SingletonModelAdmin)
admin.site.register(NewsletterPage, SingletonModelAdmin)
admin.site.register(CustomPage)

================
File: webadmin/apps.py
================
from django.apps import AppConfig


class WebadminConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'webadmin'

================
File: webadmin/models.py
================
from django.db import models
from solo.models import SingletonModel
from core.models import Mentor, Review

class CompanyLogo(models.Model):
    name = models.CharField(max_length=255)
    logo = models.ImageField(upload_to='company_logos/')
    url = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.name

class Category(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    icon = models.ImageField(upload_to='category_icons/')
    url = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.name

class FAQ(models.Model):
    question = models.CharField(max_length=255)
    answer = models.TextField()

    def __str__(self):
        return self.question

class CardSection(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    image = models.ImageField(upload_to='card_images/', blank=True, null=True)

    def __str__(self):
        return self.title

class CEO(models.Model):
    name = models.CharField(max_length=255)
    image = models.ImageField(upload_to='ceo_images/', blank=True, null=True)
    position = models.CharField(max_length=255)
    company = models.CharField(max_length=255)
    quote = models.TextField()

    def __str__(self):
        return self.name

class Homepage(SingletonModel):
    mentor_search_placeholder = models.CharField(max_length=255, default="Search for a mentor...")
    top_mentors = models.ManyToManyField(Mentor, related_name='top_mentors')
    company_logos = models.ManyToManyField(CompanyLogo, related_name='company_logos')
    categories = models.ManyToManyField(Category, related_name='categories')
    reviews = models.ManyToManyField(Review, related_name='homepage_reviews')
    faqs = models.ManyToManyField(FAQ, related_name='homepage_faqs')
    ceo_details = models.OneToOneField(CEO, on_delete=models.CASCADE, blank=True, null=True)
    section_title = models.CharField(max_length=255, default="Built for founders, marketers, and product people.")
    cards = models.ManyToManyField(CardSection, related_name='homepage_cards')
    def __str__(self):
        return "Homepage"

class CoreValue(models.Model):
    heading = models.CharField(max_length=255)
    description = models.TextField()

    def __str__(self):
        return self.heading

class BoardOfAdvisor(models.Model):
    name = models.CharField(max_length=255)
    photo = models.ImageField(upload_to='board_photos/')
    bio = models.TextField()

    def __str__(self):
        return self.name

class Teammates(models.Model):
    name = models.CharField(max_length=255)
    photo = models.ImageField(upload_to='team_photos/')
    bio = models.TextField()
    position = models.CharField(max_length=255, blank= True)
    linkedinurl = models.URLField(blank=True)
    def __str__(self):
        return self.name

class BlogCard(models.Model):
    title = models.CharField(max_length=255)
    image = models.ImageField(upload_to='blog_images/')
    url = models.URLField()

    def __str__(self):
        return self.title

class CTAButton(models.Model):
    text = models.CharField(max_length=100)
    url = models.URLField()

    def __str__(self):
        return self.text

class CTACard(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    buttons = models.ManyToManyField(CTAButton)

    def __str__(self):
        return self.title

class AboutPage(SingletonModel):
    title = models.CharField(max_length=255)
    description = models.TextField()

    # New fields
    intro_image = models.ImageField(upload_to='intro_images/', blank=True, null=True)
    sub_intro_image1 = models.ImageField(upload_to='intro_images/', blank=True, null=True)
    sub_intro_image2 = models.ImageField(upload_to='intro_images/', blank=True, null=True)
    teammates = models.ManyToManyField(Teammates, related_name='about_teammates')
    about_us_story = models.TextField(blank=True, null=True)
    team_intro_text = models.TextField(blank=True, null=True)

    # Core Values (Heading + Description for each value)
    core_values = models.ManyToManyField(CoreValue, related_name='about_page_core_values')

    # Board of Advisors
    board_of_advisors = models.ManyToManyField(BoardOfAdvisor, related_name='about_page_board')

    # Call to Action (CTA) Card
    cta_card = models.OneToOneField(CTACard, on_delete=models.CASCADE, blank=True, null=True)

    # Blog Cards
    blogs = models.ManyToManyField(BlogCard, related_name='about_page_blogs')

    def __str__(self):
        return self.title

class ContactPage(SingletonModel):
    title = models.CharField(max_length=255)
    description = models.TextField()
    address = models.TextField()
    phone = models.CharField(max_length=20)
    email = models.EmailField()

    def __str__(self):
        return self.title

class PrivacyPolicyPage(SingletonModel):
    title = models.CharField(max_length=255)
    content = models.TextField()

    def __str__(self):
        return self.title

class NewsletterPage(SingletonModel):
    title = models.CharField(max_length=255)
    description = models.TextField()
    signup_url = models.URLField()

    def __str__(self):
        return self.title

class CustomPage(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField(unique=True)
    content = models.JSONField()  # Use JSONField to store flexible content

    def __str__(self):
        return self.title

class MentoringCTA(models.Model):
    title = models.CharField(max_length=255, default="Get 1:1 Mentorship from Top Startup Experts")
    subtitle = models.CharField(max_length=255, default="India's 1st Startup Mentorship Platform")
    description = models.TextField(default="Don’t waste your time in Trial & Errors, Book 1:1 personalized session with Top experts in various industries.")
    video_url = models.URLField(blank=True, null=True, help_text="YouTube URL for the video")
    top_mentors_count = models.IntegerField(default=100)
    happy_mentees_count = models.IntegerField(default=500)
    sessions_done_count = models.IntegerField(default=1000)
    rating_stars = models.FloatField(default=4.8)
    rating_label = models.CharField(max_length=255, default="Rated by Users")

    def __str__(self):
        return "Mentoring Call-to-Action Section"

class MenttalkCTA(SingletonModel):
    title = models.CharField(max_length=255)
    subtitle = models.CharField(max_length=255)
    image = models.ImageField(upload_to='menttalk_images/')
    button_text = models.CharField(max_length=255)
    button_url = models.URLField()
    price = models.CharField(max_length=50)
    preorder_info = models.CharField(max_length=255)
    availability_info = models.CharField(max_length=255)
    extra_info = models.CharField(max_length=255)

    def __str__(self):
        return "Menttalk CTA"

class SocialLinks(models.Model):
    linkedin = models.URLField(blank=True, null=True)
    instagram = models.URLField(blank=True, null=True)
    facebook = models.URLField(blank=True, null=True)
    youtube = models.URLField(blank=True, null=True)

    def __str__(self):
        return "Social Links"

class Footer(models.Model):
    company_name = models.CharField(max_length=255)
    about_text = models.TextField()
    hashtag = models.CharField(max_length=255)
    email = models.EmailField()
    copyright = models.CharField(max_length=255)
    social_links = models.OneToOneField(SocialLinks, on_delete=models.CASCADE, blank=True, null=True)


    def __str__(self):
        return "Footer Section"

class FooterLink(models.Model):
    name = models.CharField(max_length=255)
    url = models.URLField()
    footer = models.ForeignKey(Footer, related_name='links', on_delete=models.CASCADE)
    section = models.CharField(max_length=50, choices=[('company', 'Company'), ('quick', 'Quick Links'), ('compliance', 'Compliance')])

    def __str__(self):
        return f"{self.name} ({self.section})"

================
File: webadmin/serializers.py
================
from rest_framework import serializers
from .models import Homepage, AboutPage, ContactPage, PrivacyPolicyPage, NewsletterPage, CustomPage, CompanyLogo, Category, FAQ, CardSection, CEO
from core.serializers import MentorSerializer, ReviewSerializer
from .models import MentoringCTA
from .models import MenttalkCTA
from .models import Footer, FooterLink, SocialLinks, CoreValue, BoardOfAdvisor, Teammates, BlogCard, CTACard, CTAButton



class SocialLinksSerializer(serializers.ModelSerializer):
    class Meta:
        model = SocialLinks
        fields = ['linkedin', 'instagram', 'facebook', 'youtube']

class FooterLinkSerializer(serializers.ModelSerializer):
    class Meta:
        model = FooterLink
        fields = ['name', 'url', 'section']

class FooterSerializer(serializers.ModelSerializer):
    social_links = SocialLinksSerializer()
    links = FooterLinkSerializer(many=True)

    class Meta:
        model = Footer
        fields = ['company_name', 'about_text', 'hashtag', 'email', 'copyright', 'social_links', 'links']

class CompanyLogoSerializer(serializers.ModelSerializer):
    class Meta:
        model = CompanyLogo
        fields = ['name', 'logo', 'url']

class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = ['name', 'description', 'icon', 'url']

class FAQSerializer(serializers.ModelSerializer):
    class Meta:
        model = FAQ
        fields = ['question', 'answer']

class CardSectionSerializer(serializers.ModelSerializer):
    class Meta:
        model = CardSection
        fields = ['title', 'description', 'image']

class CEOSerializer(serializers.ModelSerializer):
    class Meta:
        model = CEO
        fields = ['name', 'image', 'position', 'company', 'quote']

class HomepageSerializer(serializers.ModelSerializer):
    top_mentors = MentorSerializer(many=True)
    company_logos = CompanyLogoSerializer(many=True)
    categories = CategorySerializer(many=True)
    reviews = ReviewSerializer(many=True)
    faqs = FAQSerializer(many=True)
    cards = CardSectionSerializer(many=True)
    ceo_details = CEOSerializer()

    class Meta:
        model = Homepage
        fields = ['mentor_search_placeholder', 'top_mentors', 'company_logos', 'categories', 'reviews', 'faqs', 'ceo_details', 'section_title', 'cards']

class CoreValueSerializer(serializers.ModelSerializer):
    class Meta:
        model = CoreValue
        fields = ['heading', 'description']

class BoardOfAdvisorSerializer(serializers.ModelSerializer):
    class Meta:
        model = BoardOfAdvisor
        fields = ['name', 'photo', 'bio']

class TeammatesSerializer(serializers.ModelSerializer):
    class Meta:
        model = Teammates
        fields = ['name', 'photo', 'bio', 'linkedinurl', 'position']

class BlogCardSerializer(serializers.ModelSerializer):
    class Meta:
        model = BlogCard
        fields = ['title', 'image', 'url']

class CTAButtonSerializer(serializers.ModelSerializer):
    class Meta:
        model = CTAButton
        fields = ['text', 'url']

class CTACardSerializer(serializers.ModelSerializer):
    buttons = CTAButtonSerializer(many=True, read_only=True)

    class Meta:
        model = CTACard
        fields = ['title', 'description', 'buttons']

class AboutPageSerializer(serializers.ModelSerializer):
    core_values = CoreValueSerializer(many=True, read_only=True)
    board_of_advisors = BoardOfAdvisorSerializer(many=True, read_only=True)
    teammates = TeammatesSerializer(many=True, read_only=True)
    blogs = BlogCardSerializer(many=True, read_only=True)
    cta_card = CTACardSerializer(read_only=True)

    class Meta:
        model = AboutPage
        fields = [
            'title', 'description', 'intro_image', 'sub_intro_image1', 'sub_intro_image2',
            'about_us_story', 'team_intro_text', 'teammates','core_values', 'board_of_advisors',
            'cta_card', 'blogs'
        ]

class ContactPageSerializer(serializers.ModelSerializer):
    class Meta:
        model = ContactPage
        fields = '__all__'

class PrivacyPolicyPageSerializer(serializers.ModelSerializer):
    class Meta:
        model = PrivacyPolicyPage
        fields = '__all__'

class NewsletterPageSerializer(serializers.ModelSerializer):
    class Meta:
        model = NewsletterPage
        fields = '__all__'

class CustomPageSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomPage
        fields = '__all__'

class MentoringCTASerializer(serializers.ModelSerializer):
    class Meta:
        model = MentoringCTA
        fields = ['title', 'subtitle', 'description', 'video_url', 'top_mentors_count', 'happy_mentees_count', 'sessions_done_count', 'rating_stars', 'rating_label']


class MenttalkCTASerializer(serializers.ModelSerializer):
    class Meta:
        model = MenttalkCTA
        fields = ['title', 'subtitle', 'image', 'button_text', 'button_url', 'price', 'preorder_info', 'availability_info', 'extra_info']

================
File: webadmin/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: webadmin/urls.py
================
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import HomepageViewSet, AboutPageViewSet, ContactPageViewSet, PrivacyPolicyPageViewSet, NewsletterPageViewSet, CustomPageViewSet
from .views import MentoringCTAViewSet,MenttalkCTAViewSet
from .views import FooterViewSet

router = DefaultRouter()
router.register(r'mentoringcta', MentoringCTAViewSet)
router.register(r'menttalkcta', MenttalkCTAViewSet, basename='menttalkcta')
router.register(r'home', HomepageViewSet)
router.register(r'about', AboutPageViewSet)
router.register(r'contact', ContactPageViewSet)
router.register(r'privacy', PrivacyPolicyPageViewSet)
router.register(r'newsletter', NewsletterPageViewSet)
router.register(r'custom-pages', CustomPageViewSet)
router.register(r'footer', FooterViewSet, basename='footer')

urlpatterns = [
    path('', include(router.urls)),
]

================
File: webadmin/views.py
================
from rest_framework import viewsets
from rest_framework.permissions import AllowAny, IsAdminUser
from .models import Homepage, AboutPage, ContactPage, PrivacyPolicyPage, NewsletterPage, CustomPage, MentoringCTA
from .serializers import HomepageSerializer, AboutPageSerializer, ContactPageSerializer, PrivacyPolicyPageSerializer, NewsletterPageSerializer, CustomPageSerializer, MentoringCTASerializer
from .models import MenttalkCTA
from .serializers import MenttalkCTASerializer
from .models import Footer
from rest_framework.views import APIView
from rest_framework.response import Response
from .serializers import FooterSerializer
from rest_framework.decorators import action
from rest_framework import status

class FooterViewSet(viewsets.ModelViewSet):
    queryset = Footer.objects.all()
    serializer_class = FooterSerializer
    permission_classes = [AllowAny] 
    @action(detail=False, methods=['get'])
    def get_footer(self, request, *args, **kwargs):
        """
        Since Footer is a singleton model, 
        we override this method to always return the first (and only) Footer object.
        """
        footer = Footer.objects.first()
        if not footer:
            return Response({"error": "Footer not found"}, status=404)

        serializer = self.get_serializer(footer)
        return Response(serializer.data)

class MenttalkCTAViewSet(viewsets.ModelViewSet):
    queryset = MenttalkCTA.objects.all()
    serializer_class = MenttalkCTASerializer
    http_method_names = ['get', 'put', 'patch']  # Limit the methods to only 'get', 'put', and 'patch' (no delete or post)

    def get_permissions(self):
        # Allow any user to access the GET method
        if self.request.method == 'GET':
            return [AllowAny()]
        return super().get_permissions()

class MentoringCTAViewSet(viewsets.ModelViewSet):
    queryset = MentoringCTA.objects.all()
    serializer_class = MentoringCTASerializer
    http_method_names = ['get', 'put', 'patch']
    def get_permissions(self):
        if self.request.method in ['GET']:
            self.permission_classes = [AllowAny]
        else:
            self.permission_classes = [IsAdminUser]
        return super().get_permissions()

class HomepageViewSet(viewsets.ModelViewSet):
    queryset = Homepage.objects.all()
    serializer_class = HomepageSerializer
    lookup_field = 'pk'

    def get_permissions(self):
        if self.request.method in ['GET']:
            self.permission_classes = [AllowAny]
        else:
            self.permission_classes = [IsAdminUser]
        return super().get_permissions()

class AboutPageViewSet(viewsets.ModelViewSet):
    """
    A viewset for viewing and editing AboutPage instances.
    """
    queryset = AboutPage.objects.all()
    serializer_class = AboutPageSerializer
    permission_classes = [AllowAny]

    # Override the list method to return the singleton instance
    def list(self, request, *args, **kwargs):
        try:
            about_page = AboutPage.objects.get()
            serializer = self.get_serializer(about_page)
            return Response(serializer.data)
        except AboutPage.DoesNotExist:
            return Response({"error": "About page not found"}, status=status.HTTP_404_NOT_FOUND)

    # Optionally override the retrieve method to get the singleton instance by its ID
    def retrieve(self, request, *args, **kwargs):
        try:
            about_page = AboutPage.objects.get()
            serializer = self.get_serializer(about_page)
            return Response(serializer.data)
        except AboutPage.DoesNotExist:
            return Response({"error": "About page not found"}, status=status.HTTP_404_NOT_FOUND)

    # Optionally add a custom action to get the about page without needing an ID in the URL
    @action(detail=False, methods=['get'])
    def get_about(self, request):
        try:
            about_page = AboutPage.objects.get()
            serializer = self.get_serializer(about_page)
            return Response(serializer.data)
        except AboutPage.DoesNotExist:
            return Response({"error": "About page not found"}, status=status.HTTP_404_NOT_FOUND)

class ContactPageViewSet(viewsets.ModelViewSet):
    queryset = ContactPage.objects.all()
    serializer_class = ContactPageSerializer
    permission_classes = [AllowAny]

class PrivacyPolicyPageViewSet(viewsets.ModelViewSet):
    queryset = PrivacyPolicyPage.objects.all()
    serializer_class = PrivacyPolicyPageSerializer
    permission_classes = [AllowAny]

class NewsletterPageViewSet(viewsets.ModelViewSet):
    queryset = NewsletterPage.objects.all()
    serializer_class = NewsletterPageSerializer
    permission_classes = [AllowAny]

class CustomPageViewSet(viewsets.ModelViewSet):
    queryset = CustomPage.objects.all()
    serializer_class = CustomPageSerializer
    permission_classes = [AllowAny]

================
File: workex/migrations/0001_initial.py
================
# Generated by Django 5.0 on 2024-06-18 20:59

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('industry', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('work_description', models.TextField()),
                ('date_started', models.DateField()),
                ('date_ended', models.DateField(blank=True, null=True)),
                ('currently_working', models.BooleanField(default=False)),
                ('industry_expertise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='industry.expertise')),
            ],
        ),
    ]

================
File: workex/migrations/0002_workexperience_mentor.py
================
# Generated by Django 5.0 on 2024-06-18 21:16

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('workex', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='workexperience',
            name='mentor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to=settings.AUTH_USER_MODEL),
        ),
    ]

================
File: workex/migrations/0003_alter_workexperience_mentor.py
================
# Generated by Django 5.0 on 2024-06-18 21:56

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0014_alter_mentor_experience_delete_workexperience'),
        ('workex', '0002_workexperience_mentor'),
    ]

    operations = [
        migrations.AlterField(
            model_name='workexperience',
            name='mentor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='core.mentor'),
        ),
    ]

================
File: workex/migrations/0004_remove_workexperience_industry_expertise_and_more.py
================
# Generated by Django 5.0 on 2024-06-19 17:05

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('industry', '0001_initial'),
        ('workex', '0003_alter_workexperience_mentor'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='workexperience',
            name='industry_expertise',
        ),
        migrations.AddField(
            model_name='workexperience',
            name='industry_expertise',
            field=models.ManyToManyField(related_name='work_experiences', to='industry.expertise'),
        ),
    ]

================
File: workex/admin.py
================
from django.contrib import admin
from .models import WorkExperience

admin.site.register(WorkExperience)

================
File: workex/apps.py
================
from django.apps import AppConfig


class WorkexConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'workex'

================
File: workex/models.py
================
from django.db import models
from django.conf import settings
from industry.models import Expertise

class WorkExperience(models.Model):
    mentor = models.ForeignKey('core.Mentor', related_name='work_experiences', on_delete=models.CASCADE, null=True, blank=True)
    company_name = models.CharField(max_length=255)
    work_description = models.TextField()
    date_started = models.DateField()
    date_ended = models.DateField(blank=True, null=True)
    currently_working = models.BooleanField(default=False)
    industry_expertise = models.ManyToManyField(Expertise, related_name='work_experiences')

    def save(self, *args, **kwargs):
        if self.date_ended is None:
            self.currently_working = True
        else:
            self.currently_working = False
        super().save(*args, **kwargs)

    def __str__(self):
        return self.company_name

================
File: workex/serializers.py
================
from rest_framework import serializers
from .models import WorkExperience
from industry.models import Expertise

class ExpertiseSerializer(serializers.ModelSerializer):
    class Meta:
        model = Expertise
        fields = ['name']

class WorkExperienceSerializer(serializers.ModelSerializer):
    industry_expertise = ExpertiseSerializer(many=True)

    class Meta:
        model = WorkExperience
        fields = [
            'id', 'company_name', 'work_description', 'date_started', 
            'date_ended', 'currently_working', 'industry_expertise'
        ]

    def create(self, validated_data):
        expertise_data = validated_data.pop('industry_expertise')
        work_experience = WorkExperience.objects.create(**validated_data)
        for expertise in expertise_data:
            work_experience.industry_expertise.add(Expertise.objects.get(name=expertise['name']))
        return work_experience

================
File: workex/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: workex/urls.py
================
from django.urls import path
from .views import WorkExperienceListCreateView

urlpatterns = [
    path('work-experiences/', WorkExperienceListCreateView.as_view(), name='work-experience-list-create'),
]

================
File: workex/views.py
================
from rest_framework import generics
from .models import WorkExperience
from .serializers import WorkExperienceSerializer
from rest_framework.permissions import IsAuthenticated

class WorkExperienceListCreateView(generics.ListCreateAPIView):
    serializer_class = WorkExperienceSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return WorkExperience.objects.filter(mentor=self.request.user.mentor_profile)

    def perform_create(self, serializer):
        serializer.save(mentor=self.request.user.mentor_profile)

================
File: Xperts/asgi.py
================
"""
ASGI config for Xperts project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Xperts.settings')

application = get_asgi_application()

================
File: Xperts/custom_email_backend.py
================
# custom_email_backend.py
import ssl
import smtplib
from django.core.mail.backends.smtp import EmailBackend

class CustomEmailBackend(EmailBackend):
    def open(self):
        if self.connection:
            return False
        if self.use_ssl:
            self.connection = smtplib.SMTP_SSL(
                self.host, self.port, timeout=self.timeout, context=ssl._create_unverified_context()
            )
        else:
            self.connection = smtplib.SMTP(self.host, self.port, timeout=self.timeout)
            if self.use_tls:
                self.connection.starttls(context=ssl._create_unverified_context())

        if self.username and self.password:
            self.connection.ehlo()
            if self.use_tls and not self.use_ssl:
                self.connection.starttls(context=ssl._create_unverified_context())
                self.connection.ehlo()
            self.connection.login(self.username, self.password)
        return True

    def close(self):
        if self.connection is None:
            return
        try:
            self.connection.quit()
        except (smtplib.SMTPServerDisconnected, smtplib.SMTPResponseException):
            pass
        self.connection = None

================
File: Xperts/settings.py
================
"""
Django settings for Xperts project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
import ssl
import smtplib
from email.mime.text import MIMEText
from django.core.mail import get_connection, send_mail, EmailMultiAlternatives

# SSL context for development only
class SSLContextNoVerify(ssl.SSLContext):
    def __init__(self):
        super(ssl.SSLContext, self).__init__()
        self.check_hostname = False
        self.verify_mode = ssl.CERT_NONE

class SMTP_SSLNoVerify(smtplib.SMTP_SSL):
    def __init__(self, *args, **kwargs):
        kwargs['context'] = SSLContextNoVerify()
        super().__init__(*args, **kwargs)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(i*8q0c+gro7w^@eop%hxw6karkl+gj@np698i6el+tt#b_v7r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'core',
    'scheduling',
    'background_task',
    'tools',
    'industry',
    'articles',
    'workex',
    'events',
    'automation',
    'webadmin',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'blogs',
    'ckeditor',
    'ckeditor_uploader',
    'taggit',
    'cohorts',
    'navigation',
    'time_blocks',
    'mentorbooking',
    
    
]

# settings.py

GOOGLE_OAUTH_CLIENT_SECRETS = os.path.join(BASE_DIR, 'secrets', 'client_secret.json')  # Path to your Google client secret file
GOOGLE_OAUTH_REDIRECT_URI = 'http://localhost:8000/oauth2callback/'  # The redirect URL after authentication

RAZORPAY_API_KEY = 'rzp_test_GY4iJFc1dQJzvQ'
RAZORPAY_API_SECRET = 'Jwb2JZb3lsJnzrCUROE92mF8'

# settings.py

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp-relay.brevo.com'  # or your email provider's SMTP server
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = '793258001@smtp-brevo.com'
EMAIL_HOST_PASSWORD = 'Cf8wjxUIDPAdOXLR'
EMAIL_SSL_CONTEXT = SSLContextNoVerify()

SOCIALACCOUNT_LOGIN_ON_GET=True
AUTH_USER_MODEL = 'core.CustomUser'
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]
CORS_ORIGIN_ALLOW_ALL = True 

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Ensure this is before CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
    'x-csrftoken',
    'Access-Control-Allow-Credentials',
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '97262453299-dnu5p4m5se2e5ajq1jkti83u21p7ugo6.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'



SITE_ID = 1

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_VERIFICATION = 'optional'

SOCIAL_AUTH_URL_NAMESPACE = 'social'




ROOT_URLCONF = 'Xperts.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
            ],
        },
    },
]

WSGI_APPLICATION = 'Xperts.wsgi.application'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CKEDITOR_UPLOAD_PATH = "uploads/"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

================
File: Xperts/urls.py
================
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/auth/', include('core.urls')),
    path('api/', include('core.urls')),
    path('api/expertise/', include('industry.urls')),
    path('api/tools/', include('tools.urls')),
    path('api/', include('workex.urls')),
    path('api/', include('events.urls')),  # Include the events app URLs
    path('api/webadmin/', include('webadmin.urls')),
    path('auth/', include('social_django.urls', namespace='social')),
    path('api/', include('blogs.urls')),
    path('ckeditor/', include('ckeditor_uploader.urls')),
    path('api-auth/', include('rest_framework.urls')),  # for browsable API login
    path('auth/', include('core.urls')),  # Include the core app URLs
    path('social-auth/', include('social_django.urls', namespace='social')),
    path('api/', include('cohorts.urls')),
    path('navigation/', include('navigation.urls')),

    
    


]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

================
File: Xperts/wsgi.py
================
"""
WSGI config for Xperts project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Xperts.settings')

application = get_wsgi_application()

================
File: manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Xperts.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: requirements.txt
================
asgiref==3.8.1
certifi==2024.8.30
cffi==1.17.0
charset-normalizer==3.3.2
cryptography==43.0.1
defusedxml==0.8.0rc2
dj-rest-auth==6.0.0
Django==5.1.1
django-allauth==64.2.0
django-ckeditor==6.7.1
django-cors-headers==4.4.0
django-js-asset==2.2.0
django-solo==2.3.0
django-taggit==6.0.0
djangorestframework==3.15.2
idna==3.8
oauthlib==3.2.2
pillow==10.4.0
pycparser==2.22
PyJWT==2.9.0
python3-openid==3.2.0
razorpay==1.4.2
requests==2.32.3
requests-oauthlib==2.0.0
setuptools==74.1.1
social-auth-app-django==5.4.2
social-auth-core==4.5.4
sqlparse==0.5.1
urllib3==2.2.2
